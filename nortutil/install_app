#! /bin/sh
#__USAGE
#%C	[orig] [make] [clean] [dump] [install]
#	If orig is specified, two dirs are created, one clean
#	If make is specified, a Configure and make are run
#	after the installation.
#	Archive will not be re-extracted if the directory exists
#	unless clean is specified
#	If dump is specified, install_app will just display
#	what files it would use.

# Assumption here is a directory structure of
#   .                      current directory. This script,
#                          QNX patches, etc.
#	./QNX.setup            Setup script which defines at least
#                          archive, pkg, patches, mypatches
#	./QNX.newfiles         used by mkpatch to identify files
#	                       which must be created.
#	./QNX.make             script to perform make operation
#	./$archive             tar'ed and gzipped archive
#	                       defaults to $pkg.tar.gz
#	$archpkg               base directory in the archive
#	./BLD/$pkg             directory for new distribution
#	./ORIG/$pkg            A clean directory when developing

# The archive, any patches and any mypatches may be located
# either in the $portdir or its parent directory.
# After the archive is expanded, a softlink is created in
# the ../$pkg directory to point to the $portpath:
#   ln -s $portpath ../$pkg/qnxp
# 
# QNX.setup is charged with defining the variables pkg, archive,
# archpkg, patches and mypatches
# pkg: the name of the directory in which build we occur,
#      usually coded by version number.
# archive: the name of the archive file, defaulting to
#      $pkg.tar.gz
# archpkg: the name of the directory into which the archive
#      expands. Defaults to ${archive%.tar*}
# patches: a space-delimited list of official patches
# mypatches: a space-delimited list of local unofficial patches
#   The difference between patches and mypatches is that
#   if we make any local changes, we'll want to generate diffs
#   against the latest official patches, rather than an earlier
#   version, so we apply patches to our ORIG directories, but
#   only apply mypatches to the BLD directories.

# The QNX.make command will be executed in the BLD/$pkg directory.
# It isn't dot-executed, so it does not have immediate access to
# the variables defined in QNX.setup. It can readily determine
# the pkg via basename $PWD, and that is probably all that is
# necessary, although if anything else is required, QNX.setup
# could export the pertinent variable. QNX.make can also assume
# that the port directory is ../..
#
# In addition to building the application, QNX.make is now
# charged with creating a file in the BLD directory called
# $pkg.made if the build is successful. If this file exists,
# QNX.make won't be invoked.

# The QNX.install command is very similar to the QNX.make.
# It too is invoked in BLD/$pkg and is also charged with
# creating a $pkg.installed file if the install is successful.
# QNX.install will be run as root, whereas QNX.make is run
# as $LOGNAME.

function nl_error {
  echo "install_app: $*" >&2
  exit 1
}

portpath=`pwd`
portpath=`fullpath -t $portpath`
[ -d "$portpath" ] || nl_error Cannot find run directory
# portdir=`basename $portpath`

[ -f QNX.setup ] || nl_error Cannot locate QNX.setup
. ./QNX.setup
# cd ..
[ -n "$pkg" ] ||
  nl_error QNX.setup must define pkg
[ -z "$archpkg" ] && archpkg=$pkg
[ -z "$archive" ] && archive=$archpkg.tar.gz
farchive=""
for i in "$archive" "ARC/$archive"; do
  [ -f "$i" ] && farchive=$i && break;
done
[ -z "$farchive" ] && nl_error Cannot locate archive $archive
function find_patch {
  patch=$1
  for path in "" "ARC/" "PAT/"; do
	for ext in "" .F .z .gz; do
	  [ -f "$path$patch$ext" ] && fullpath -t "$path$patch$ext" && return
	done
  done
}
fpatches=""
if [ -n "$patches" ]; then
  for file in $patches; do
	fpatch=`find_patch $file`
	[ -z "$fpatch" ] && nl_error Cannot locate patch $file
	fpatches="$fpatches $fpatch"
  done
fi
fmypatches=""
if [ -n "$mypatches" ]; then
  for file in $mypatches; do
	fpatch=`find_patch $file`
	[ -z "$fpatch" ] && nl_error Cannot locate patch $file
	fmypatches="$fmypatches $fpatch"
  done
fi

typeset orig=no make=no clean=no typeset unpack=no dump=no
typeset install=no

while [ -n "$1" ]; do
  case "$1" in
	orig) orig=yes;;
	make) make=yes;;
	clean) clean=yes;;
	dump) dump=yes;;
	install) install=yes;;
	*) nl_error "Unknown option '$1'";;
  esac
  shift
done

if [ $dump = yes ]; then
  echo "pkg=$pkg"
  echo "archive=$archive"
  echo "farchive=$farchive"
  echo "archpkg=$archpkg"
  echo "patches:"
  for i in $patches; do
	echo "  $i"
  done
  echo "mypatches:"
  for i in $mypatches; do
	echo "  $i"
  done
  echo "fpatches:"
  for i in $fpatches; do
	echo "  $i"
  done
  echo "fmypatches:"
  for i in $fmypatches; do
	echo "  $i"
  done
  exit 0
fi

[ $make = yes -a ! -x ./QNX.make ] &&
  nl_error Cannot make unless QNX.make is executable
[ $install = yes -a ! -x ./QNX.install ] &&
  nl_error Cannot install unless QNX.install is executable

function dopatches {
  echo dopatches: $*
  pwd
  for pat in $*; do
	[ -f "$pat" ] || nl_error Could not find patch $pat
	case $pat in
	  *.gz) zcat $pat >patchtmp.pat; pat=patchtmp.pat;;
	  *.z)  zcat $pat >patchtmp.pat; pat=patchtmp.pat;;
	  *.F)  fcat $pat >patchtmp.pat; pat=patchtmp.pat;;
	esac
	sh $pat
	patch -p1 -N <$pat
	rm -f patchtmp.pat
	find . -name "*.orig" | xargs rm -f
  done
}

unpack=''
[ ! -d "ORIG/$pkg" -a "$orig" = "yes" ] && unpack=ORIG
[ ! -d "BLD/$pkg" -o "$clean" = "yes" ] && unpack="$unpack BLD"
made=no
[ -f BLD/$pkg.made ] && made=yes
installed=no
[ -f BLD/$pkg.installed ] && installed=yes
[ "$install" = "yes" ] && make=yes
if [ "$clean" = "yes" ]; then
  made=no
  installed=no
fi
[ "$made" = "yes" ] && make=no
[ "$installed" = "yes" ] && install=no
uid=`id -u`
if [ -n "$unpack" -o "$make" = "yes" ] &&
	[ $uid = 0 -a ! "$LOGNAME" = root ]; then
  suargs=''
  [ $orig = yes ] && suargs="orig"
  [ $clean = yes ] && suargs="$suargs clean"
  [ $make = yes ] && suargs="$suargs make"
  su $LOGNAME -c "$0 $suargs"
else
  if [ -n "$unpack" ]; then
	[ -d BLD ] || mkdir BLD ||
	  nl_error Unable to create BLD directory
	{
	# now we're logging
	if [ -d "BLD/$pkg" -a "$clean" = "yes" ]; then
	  echo Removing old BLD/$pkg
	  rm -rf BLD/$pkg
	  [ -d "BLD/$pkg" ] && nl_error Unable to remove old BLD/$pkg
	fi
	for tree in $unpack; do
	  [ -d $tree ] || mkdir $tree ||
		nl_error Unable to create $tree subdirectory
	  cd $tree
	  [ -d "$archpkg.sav" ] &&
		nl_error $tree/$archpkg.sav already exists
	  [ "$archpkg" != "$pkg" -a -d "$archpkg" ] &&
		mv $archpkg $archpkg.sav

	  [ ! -d "$archpkg" ] && zcat ../$farchive | pax -rv
	  [ ! -d "$archpkg" ] && nl_error "Archive unpack failed"
	  [ "$archpkg" != "$pkg" ] && mv $archpkg $pkg
	  [ -d "$archpkg.sav" ] && mv -v $archpkg.sav $archpkg
	  cd $pkg
	  chmod -R u+w *
	  for i in *.orig; do
		[ -f "$i" ] &&
		  echo "Warning: $i in distribution will be deleted"
	  done
	  [ -n "$fpatches" ] && dopatches $fpatches
	  # ln -fs $portpath qnxp
	  if [ -n "$fmypatches" -a ! "$tree" = ORIG ]; then
		dopatches $fmypatches
	  fi
	  cd ../..
	done


	} 2>&1 | tee BLD/$pkg.log || exit 1
  fi

  cd BLD/$pkg
  pwd
  if [ $make = yes ]; then
	[ -x "$portpath/QNX.make" ] || nl_error "Cannot find QNX.make"
	if [ -n "$NOLOG" ]; then
	  $portpath/QNX.make
	else
	  $portpath/QNX.make 2>&1 | tee ../$pkg.make.log
	fi
  fi
  cd -
  [ -f BLD/$pkg.made ] ||
	nl_error "BLD/$pkg.made not found"
fi

if [ "$install" = "yes" ]; then
  [ $uid = 0 ] || nl_error Must be root to install
  [ -f BLD/$pkg.made ] ||
	nl_error "BLD/$pkg.made not found"
  cd BLD/$pkg
  [ -x ../../QNX.install ] || nl_error "Cannot find QNX.install"
  ../../QNX.install 2>&1 | tee ../$pkg.inst.log
  [ -f ../$pkg.installed ] ||
	nl_error "BLD/$pkg.installed not found"
fi
:
