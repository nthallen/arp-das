#! /usr/bin/perl -w
# Possible improvements:
#   Option to include certain plots in multiple groups.
#   Workaround is not terribly onerous, just an extra pl_ file.

#ifdef __USAGE
#%C	[-d matdir] [-c] [-j] [-o <filename>] inputfile
#	-d matdir write .m files to specified directory
#	-c generate .cdf for csv instead of .edf
#	-j generate .cdf for json instead of .edf
#       -o <filename> specify output .cdf or .edf explicitly
#
# Generates p$mnemonic, g$mnemonic, ui_$mnemonic and .edf outputs
#
# Input file format:
#
# HEADER text - appears at the top of GUI index
# MNEMONIC \w+ - used all over to make names specific
# HOMEDIR \S+ - the directory where we'll find run subdirectories
# ROWS \d+ - used to decide when to create a new column in the GUI
# \d+(/\d+)? \w+(:\w+:\d+)? \w+ \w+
#  <Rate> <Mnemonic>[:<Mnemonic>:<bitnumber>] <group> <plot> [<format>] [<legend>]

use strict;
use Getopt::Std;
my %opts;
getopts('cjd:o:', \%opts);
$opts{c} && $opts{j} && die "Cannot select both -c and -j\n";
my $matdir = $opts{d};
if ($matdir && ! -d $matdir) {
  die "Specified matdir '$matdir' is not a directory\n";
}

my %group; # for each grp, list of plots in definition order
my @group; # list of grps in definition order
my %panel; # for each panel, list of groups
my @panel; # list of panel groups in definition order
my %plot; # for each shortname, list of data to plot
my %iscustom; # for each custom plot
my %rate; # for each rate a hash of data to extract
my %datarate; # rate for each extracted datum
my %format; # output format for each extracted datum
my %shortname; # translation from longname to shortname
my %longname; # translation from shortname to longname
my $experiment = 'eng';
my $homedir = 'C:/home/Exp';
my $header = 'Engineering Data';
my $ui_limit = 20;
my %generated; # hash of generated output files
my $usepanels;

sub set_shortname {
  my ( $pre, $name, $func ) = @_;
  my $prename =
    $pre ne '' ? "$pre:$name" : $name;
  die "Specified function name '$func' conflicts with earlier definition\n"
  if defined $shortname{$prename} && $shortname{$prename} ne $func;
  die "Specified function name '$func' conflicts with earlier definition\n"
  if defined $longname{$func} && $longname{$func} ne $prename;
  $shortname{$prename} = $func;
  $longname{$func} = $prename;
  $iscustom{$func} = 1;
}

sub shortname {
  my ( $pre, $name ) = @_;
  my $prename =
    $pre ne '' ? "$pre:$name" : $name;
  return $shortname{"$prename"}
    if defined $shortname{"$prename"};
  my $try = join '',
    map lc,
      grep m/[A-Z]/,
        split( //, $name );
  my $lcname = lc $name;
  $lcname =~ s/:/_/; # For Panel Support
  for my $short ( $try, "$lcname", "_$lcname" ) {
    my $ps = "$pre$short";
    unless ( defined $longname{$ps} ) {
      $longname{$ps} = $prename;
      $shortname{$prename} = $ps;
      return $ps;
    }
  }
  die "Unable to find shortname for '$pre', '$name'\n";
}

while (<>) {
  next if m/^\s*#/;
  next if m/^\s*$/;
  if ( m/^HEADER\s+(.*)$/ ) {
    $header = $1;
  } elsif ( m/^MNEMONIC\s+(\w+)/ ) {
    $experiment = $1;
  } elsif ( m/^HOMEDIR\s+(\S+)/ ) {
    $homedir = $1;
  } elsif ( m/^ROWS\s+(\d+)/ ) {
    $ui_limit = $1;
  } elsif ( m|^\s*(\d+(?:/\d+)?(?:\#\d+(?:/\d+)?)?) # rate
               \s+(\w+(?::\w+:\d+)?)(?::([-+*/]\S+))? # mnemonic
               \s+(\w+(?::\w+)?) # group
               \s+(\w+) # plot
               (?:\s+(%\S+))? # format
               (?:\s+:(\w+))? # shortname
               (?:\s+(\[[^\]]+\]))? # legend pos
               (?:\s+(\w+))? # legend
               \s*$|x ) {
    my ( $rate, $mnemonic, $scale, $group, $plot, $format, $custfunc, $legpos, $legend ) =
      ( $1, $2, $3, $4, $5, $6, $7, $8, $9 );
    my $datum;
    if ( $mnemonic =~ m/^\w+:(\w+):\d+$/ ) {
      $datum = $1;
    } else {
      $datum = $mnemonic; # and leave $bit undef
    }
    # $rate =~ s,/,_,g;
    $rate =~ s,^.*#,,;
    $rate{$rate} = {} unless defined $rate{$rate};
    $rate{$rate}->{$datum} = 1;
    if ( defined( $datarate{$datum} ) &&
         $datarate{$datum} ne $rate ) {
      warn "Datum '$datum' extracted at both ",
        "$rate and $datarate{$datum} Hz\n";
    } else {
      $datarate{$datum} = $rate;
    }
    $format = '' unless defined $format;
    if (defined( $format{$datum} ) &&
        $format{$datum} ne $format) {
      warn "Datum '$datum' extracted with multiple formats: '$format{$datum}' and '$format'\n";
    }
    $format{$datum} ||= $format;
    my $usespanel = $group =~ m/:/ ? 1 : 0;
    if (defined($usepanels)) {
      if ($usepanels != $usespanel) {
        die "Inconsistent use of Panels at datum '$datum'\n";
      }
    } else {
      $usepanels = $usespanel;
    }
    my $grp = shortname('', $group);
    set_shortname($grp, $plot, $custfunc) if $custfunc;
    my $plt = shortname($grp, $plot);
    unless ( defined $group{$grp} ) {
      $group{$grp} = [];
      push @group, $grp;
    }
    my $panel;
    if ($usepanels) {
      $group =~ m/^(\w+):(\w+)$/ || die;
      $panel = $1;
    } else {
      $panel = 'dflt';
    }
    unless (defined $panel{$panel}) {
      $panel{$panel} = { groups => [], grpdef => {} };
      push @panel, $panel;
    }
    unless (defined $panel{$panel}->{grpdef}->{$grp}) {
      $panel{$panel}->{grpdef}->{$grp} = 1;
      push @{$panel{$panel}->{groups}}, $grp;
    }
    unless ( defined $plot{$plt} ) {
      $plot{$plt} = [];
      push @{$group{$grp}}, $plt;
    }
    $legend = $mnemonic unless defined $legend;
    $scale = '' unless defined $scale;
    push @{$plot{$plt}}, { mnc => $mnemonic, legend => $legend,
      legpos => $legpos, scale => $scale };
  } else {
    chomp;
    warn "Syntax error: '$_'\n";
  }
}

if ( $opts{c} || $opts{j} ) {
  my $cdf_type = $opts{c} ? 'csv' : 'json';
  my $ofile = $opts{o} // ( $opts{c} ? "${experiment}eng.cdf" :
    "${experiment}json.cdf");
  open( CDF, ">$ofile" ) ||
    die "Unable to write $ofile\n";
  my @rates = sort keys %rate;
  for my $rate ( @rates ) {
    my @vars = grep $format{$_} !~ m/-$/, sort keys %{$rate{$rate}};
    my @formats = map $format{$_}, @vars;
    $rate =~ s|/|_|g;
    my $n_var = @vars + 1;
    print CDF "$cdf_type ${experiment}eng_$rate $n_var\n",
      "  0 T${experiment}eng_$rate %.3lf\n",
      join( "\n", map "  $_ $vars[$_-1] $formats[$_-1]", ( 1 .. @vars ) ),
      "\n";
  }
  close CDF || warn "Error closing $ofile\n";
} else {
  my $ofile = $opts{o} // "${experiment}eng.edf";
  open( EDF, ">$ofile" ) ||
    die "Unable to write $ofile\n";
  my @rates = sort keys %rate;
  for my $rate ( @rates ) {
    my @vars = sort keys %{$rate{$rate}};
    $rate =~ s|/|_|g;
    my $n_var = @vars + 1;
    print EDF "spreadsheet ${experiment}eng_$rate $n_var\n",
      join( "\n", map "  $_ $vars[$_-1] %5.1lf", ( 1 .. @vars ) ),
      "\n";
  }
  close EDF || warn "Error closing $ofile\n";
}

if ($matdir) {
  open( UI, ">", "${matdir}/ui_$experiment.m" ) ||
    die "Unable to open ui_$experiment.m\n";
  $generated{"ui_$experiment.m"} = 1;
  print UI
    "function ui_$experiment\n",
    "f = ne_dialg('$header',1);\n";
  my $ui_rows = 0;

  for my $panel (@panel) {
    if ($usepanels) {
      my $paneltext = $panel;
      $paneltext =~ s/_/ /g;
      print UI
        "f = ne_dialg(f, 'newcol');\n",
        "f = ne_dialg(f, 'newtab', '$paneltext');\n";
      $ui_rows = 0;
    }
    for my $grp (@{$panel{$panel}->{groups}}) {
      my $group = $longname{$grp};
      my @plots = @{$group{$grp}};
      my $grouptext = $group;
      $grouptext =~ s/^\w+://;
      $grouptext =~ s/_/ /g;
      $grouptext =
        join " ", grep /./, split( /([A-Z][a-z]+)/, $grouptext );
      $grouptext =~ s/  +/ /g;
      if ( $ui_rows > 0 && $ui_rows + @plots + 1 > $ui_limit ) {
        print UI "f = ne_dialg(f, 'newcol');\n";
        $ui_rows = 0;
      }
      print UI
        "f = ne_dialg(f, 'add', 0, 1, 'g$experiment$grp', '$grouptext' );\n";
      $ui_rows += @plots + 1;
      open( GRP, ">", "${matdir}/g$experiment$grp.m" ) ||
        die "Unable to write g$experiment$grp.m\n";
      $generated{"g$experiment$grp.m"} = 1;
      print GRP
        "function fig = g$experiment$grp(varargin);\n",
        "% g$experiment$grp(...)\n",
        "% $grouptext\n",
        "ffig = ne_group(varargin,'$grouptext',",
        join( ",", map "'" . ($iscustom{$_} ? "cust_" : "") . "p$experiment$_'", @plots ),
        ");\n",
        "if nargout > 0 fig = ffig; end\n";
      close GRP || warn "Error closing g$experiment$grp.m\n";
      for my $plt ( @plots ) {
        my $plot = $longname{$plt};
        $plot =~ s/^$grp://;
        my $plottext = $plot;
        $plottext =~ s/_/ /g;
        $plottext =
          join " ", grep /./, split( /([A-Z][a-z]+)/,
            $plottext );
        $plottext =~ s/  +/ /g;
        my $qplt = "p$experiment$plt";
        if ($iscustom{$plt}) {
          $qplt = "cust_$qplt";
          $generated{"$qplt.m"} = 1;
        }
        print UI
          "f = ne_dialg(f, 'add', 1, 0, '$qplt', '$plottext' );\n";
        if ( ! $iscustom{$plt} ) {
          open( PLT, ">", "${matdir}/$qplt.m" ) ||
            die "Unable to write to $qplt.m\n";
          $generated{"$qplt.m"} = 1;
          $generated{"cust_$qplt.m"} = 1;
          print PLT
            "function $qplt(varargin);\n",
            "% $qplt( [...] );\n",
            "% $grouptext $plottext\n";
          my @mnemonics =
            map { ref($_) ? $_->{mnc} . $_->{scale} : $_ } @{$plot{$plt}};
          my @legpos =
            grep $_, map { $_->{legpos} } @{$plot{$plt}};
          die "More than one legend position specified for group/plot $grp/$plt\n"
            if @legpos > 1;
          my $legpos = '';
          if ( @legpos ) {
            $legpos = $legpos[0] . ", ";
          }
          if ( grep /:/, @mnemonics ) {
            die "Plot $plt mixes analog and digital data\n"
              if grep !/:/, @mnemonics;
            print PLT
              "h = ne_dstat({\n  ",
              join( "; ...\n	",
                map { m/^(\w+):(\w+):(\d+)$/; "'$1', '$2', $3"; }
                  @mnemonics ),
              " }, '$plottext', varargin{:} );\n";
          } else {
            my @legends =
              map { s/_/\\_/g; "'$_'" }
                map { ref($_) ? $_->{legend} : $_ }
                  @{$plot{$plt}};
            print PLT
              "h = timeplot({",
              join( ",", map "'$_'", @mnemonics ), "}, ...\n",
              "      '$grouptext $plottext', ...\n",
              "      '$plottext', ...\n",
              "      {$legpos",
              join( ",", @legends ), "}, ...\n",
              "      varargin{:} );\n";
          }
          close PLT || warn "Error closing $qplt.m\n";
        }
      }
    }
  }
  print UI
    "f = ne_dialg(f, 'newcol');\n",
    "f = ne_dialg(f, 'newtab', 'Runs');\n"
    if $usepanels;
  print UI
    "f = ne_listdirs(f, '$homedir', ", int($ui_limit*.75), ");\n",
    "f = ne_dialg(f, 'newcol');\n",
    "ne_dialg(f, 'resize');\n";
  close UI || warn "Error closing ui_$experiment.m\n";

  my @mfiles = grep !$generated{$_}, sort map { s,^$matdir/,,; $_; }
    <$matdir/*.m>;
  if (@mfiles) {
    warn "The following mfiles are not generated or referenced by genui:\n", map "  $_\n", @mfiles;
  }
}

