#! /usr/bin/perl -w
# Possible improvements:
#   Option to include certain plots in multiple groups.
#   Workaround is not terribly onerous, just an extra pl_ file.

#ifdef __USAGE
#%C	[-d matdir] [-c] inputfile
#	-d matdir directory to write .m files. Default is
#	current directory.
#	-c generate .cdf instead of .edf
#
# Generates p$mnemonic, g$mnemonic, ui_$mnemonic and .edf outputs
#
# Input file format:
#
# HEADER text - appears at the top of GUI index
# MNEMONIC \w+ - used all over to make names specific
# HOMEDIR \S+ - the directory where we'll find run subdirectories
# ROWS \d+ - used to decide when to create a new column in the GUI
# \d+(/\d+)? \w+(:\w+:\d+)? \w+ \w+
#  <Rate> <Mnemonic>[:<Mnemonic>:<bitnumber>] <group> <plot> [<format>] [<legend>]

use strict;
use Getopt::Std;
my %opts;
getopts('cd:', \%opts);
my $matdir = $opts{d} || '.';
-d $matdir || die "Specified matdir '$matdir' is not a directory\n";

my %group; # for each grp, list of plots in definition order
my @group; # list of grps in definition order
my %plot; # for each shortname, list of data to plot
my %rate; # for each rate a hash of data to extract
my %datarate; # rate for each extracted datum
my %format; # output format for each extracted datum
my %shortname; # translation from longname to shortname
my %longname; # translation from shortname to longname
my $experiment = 'eng';
my $homedir = 'C:/home/Exp';
my $header = 'Engineering Data';
my $ui_limit = 20;

sub shortname {
  my ( $pre, $name ) = @_;
  return $shortname{"$pre$name"}
    if defined $shortname{"$pre$name"};
  my $try = join '', $pre,
    map lc,
      grep m/[A-Z]/,
        split( //, $name );
  my $lcname = lc $name;
  for my $short ( $try, "$pre$lcname", "${pre}_$lcname" ) {
    unless ( defined $longname{$short} ) {
      $longname{$short} = "$pre$name";
      $shortname{"$pre$name"} = $short;
      return $short;
    }
  }
  die "Unable to find shortname for '$pre', '$name'\n";
}

while (<>) {
  next if m/^\s*#/;
  next if m/^\s*$/;
  if ( m/^HEADER\s+(.*)$/ ) {
    $header = $1;
  } elsif ( m/^MNEMONIC\s+(\w+)/ ) {
    $experiment = $1;
  } elsif ( m/^HOMEDIR\s+(\S+)/ ) {
    $homedir = $1;
  } elsif ( m/^ROWS\s+(\d+)/ ) {
    $ui_limit = $1;
  } elsif ( m|^\s*(\d+(?:/\d+)?(?:\#\d+(?:/\d+)?)?) # rate
               \s+(\w+(?::\w+:\d+)?)(?::([-+*/]\S+))? # mnemonic
               \s+(\w+) # group
               \s+(\w+) # plot
               (?:\s+(%\S+))? # format
               (?:\s+(\w+))? # legend
               \s*$|x ) {
    my ( $rate, $mnemonic, $scale, $group, $plot, $format, $legend ) =
      ( $1, $2, $3, $4, $5, $6, $7 );
    my $datum;
    if ( $mnemonic =~ m/^\w+:(\w+):\d+$/ ) {
      $datum = $1;
    } else {
      $datum = $mnemonic; # and leave $bit undef
    }
    # $rate =~ s,/,_,g;
    $rate =~ s,^.*#,,;
    $rate{$rate} = {} unless defined $rate{$rate};
    $rate{$rate}->{$datum} = 1;
    if ( defined( $datarate{$datum} ) &&
         $datarate{$datum} ne $rate ) {
      warn "Datum '$datum' extracted at both ",
        "$rate and $datarate{$datum} Hz\n";
    } else {
      $datarate{$datum} = $rate;
    }
    $format = '' unless defined $format;
    if (defined( $format{$datum} ) &&
        $format{$datum} ne $format) {
      warn "Datum '$datum' extracted with multiple formats: '$format{$datum}' and '$format'\n";
    }
    $format{$datum} ||= $format;
    my $grp = shortname('', $group);
    my $plt = shortname($grp, $plot);
    unless ( defined $group{$grp} ) {
      $group{$grp} = [];
      push @group, $grp;
    }
    unless ( defined $plot{$plt} ) {
      $plot{$plt} = [];
      push @{$group{$grp}}, $plt;
    }
    $legend = $mnemonic unless defined $legend;
    $scale = '' unless defined $scale;
    push @{$plot{$plt}}, { mnc => $mnemonic, legend => $legend,
      scale => $scale };
  } else {
    chomp;
    warn "Syntax error: '$_'\n";
  }
}

if ( $opts{c} ) {
  open( CDF, ">${experiment}eng.cdf" ) ||
    die "Unable to write ${experiment}eng.cdf\n";
  my @rates = sort keys %rate;
  for my $rate ( @rates ) {
    my @vars = sort keys %{$rate{$rate}};
    my @formats = map $format{$_}, @vars;
    $rate =~ s|/|_|g;
    my $n_var = @vars + 1;
    print CDF "csv ${experiment}eng_$rate $n_var\n",
      "  0 T${experiment}eng_$rate %.3lf\n",
      join( "\n", map "  $_ $vars[$_-1] $formats[$_-1]", ( 1 .. @vars ) ),
      "\n";
  }
  close CDF || warn "Error closing ${experiment}eng.cdf\n";
} else {
  open( EDF, ">${experiment}eng.edf" ) ||
    die "Unable to write ${experiment}eng.edf\n";
  my @rates = sort keys %rate;
  for my $rate ( @rates ) {
    my @vars = sort keys %{$rate{$rate}};
    $rate =~ s|/|_|g;
    my $n_var = @vars + 1;
    print EDF "spreadsheet ${experiment}eng_$rate $n_var\n",
      join( "\n", map "  $_ $vars[$_-1] %5.1lf", ( 1 .. @vars ) ),
      "\n";
  }
  close EDF || warn "Error closing ${experiment}eng.edf\n";
}

open( UI, ">", "${matdir}/ui_$experiment.m" ) ||
  die "Unable to open ui_$experiment.m\n";
print UI
  "function ui_$experiment;\n",
  "f = ne_dialg('$header');\n";
my $ui_rows = 0;

for my $grp ( @group ) {
  my $group = $longname{$grp};
  my @plots = @{$group{$grp}};
  my $grouptext =
    join " ", grep /./, split( /([A-Z][a-z]+)/, $group );
  if ( $ui_rows > 0 && $ui_rows + @plots + 1 > $ui_limit ) {
    print UI "f = ne_dialg(f, 'newcol');\n";
    $ui_rows = 0;
  }
  print UI
    "f = ne_dialg(f, 'add', 0, 1, 'g$experiment$grp', '$grouptext' );\n";
  $ui_rows += @plots + 1;
  open( GRP, ">", "${matdir}/g$experiment$grp.m" ) ||
    die "Unable to write g$experiment$grp.m\n";
  print GRP
    "function fig = g$experiment$grp(varargin);\n",
    "% g$experiment$grp(...)\n",
    "% $grouptext\n",
    "ffig = ne_group(varargin,'$grouptext',",
    join( ",", map "'p$experiment$_'", @plots ),
    ");\n",
    "if nargout > 0 fig = ffig; end\n";
  close GRP || warn "Error closing g$experiment$grp.m\n";
  for my $plt ( @plots ) {
    my $plot = $longname{$plt};
    $plot =~ s/^$grp//;
    my $plottext =
      join " ", grep /./, split( /([A-Z][a-z]+)/,
        $plot );
    print UI
      "f = ne_dialg(f, 'add', 1, 0, 'p$experiment$plt', '$plottext' );\n";
    open( PLT, ">", "${matdir}/p$experiment$plt.m" ) ||
      die "Unable to write to plt_$plt.m\n";
    print PLT
      "function p$experiment$plt(varargin);\n",
      "% p$experiment$plt( [...] );\n",
      "% $grouptext $plottext\n";
    my @mnemonics =
      map { ref($_) ? $_->{mnc} . $_->{scale} : $_ } @{$plot{$plt}};
    if ( grep /:/, @mnemonics ) {
      die "Plot $plt mixes analog and digital data\n"
        if grep !/:/, @mnemonics;
      print PLT
        "h = ne_dstat({\n  ",
        join( "; ...\n	",
          map { m/^(\w+):(\w+):(\d+)$/; "'$1', '$2', $3"; }
            @mnemonics ),
        " }, '$plot', varargin{:} );\n";
    } else {
      my @legends =
        map { s/_/\\_/g; "'$_'" }
          map { ref($_) ? $_->{legend} : $_ }
            @{$plot{$plt}};
      print PLT
        "h = timeplot({",
        join( ",", map "'$_'", @mnemonics ), "}, ...\n",
        "      '$grouptext $plottext', ...\n",
        "      '$plot', ...\n",
        "      {",
        join( ",", @legends ), "}, ...\n",
        "      varargin{:} );\n";
    }
    close PLT || warn "Error closing p$experiment$plt.m\n";
  }
}
print UI
  "f = ne_listdirs(f, '$homedir', 8 );\n",
  "f = ne_dialg(f, 'newcol');\n",
  "f = ne_dialg(f, 'resize');\n";
close UI || warn "Error closing ui_$experiment.m\n";
