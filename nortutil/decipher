#! /usr/bin/perl -w
use strict;

my %sizes = (
  a => 1,
  c => 1,
  C => 1,
  s => 2,
  S => 2,
  l => 4,
  L => 4,
  f => 4,
  d => 8,
  n => 2,
  N => 4
);

# decipher <pattern> <input> [<input> ...]
my $pattern = load_pattern(shift @ARGV);
my @ifiles = open_ifiles(@ARGV);
process_pattern( $pattern, @ifiles );
exit(0);

# What is a pattern?
# Width \d+ - set the width of a column
#
# A %[.\w+] - output the current file offset using the specified
#             format.
# [acCsSlLfdnN][\d+] %[.\w+] - Read that many of that type and
#   display using the specified format
#   a ASCII chars: displays in specified integer format
#           and also as text.
#   c signed char
#   C unsigned char
#   s signed short
#   S unsigned short
#   l signed long
#   L unsigned long
#   f single-precision float
#   d double-precision float
#   n unsigned short in "network order"
#   N unsigned long in "network order"
#   Z NUL-terminated ASCII string rounded to
#       what appears to be the appropriate boundary.
# ".*" - output the specified string
# $  - output a newline
# #  - comments
# REPEAT [\d+]
# END
#
# Things that would be cool:
#   Output in multiple formats:
#      DO L2 %d AND S4 %d AND C8 %02X END
#   Format to suppress output: %!, say?
#   Variables:
#     Foo = L1 %3d
#       If index is 1, its a scalar. If more, an array (unless string type)
#     $Foo %3d - redisplay variable
#     $Foo[2] %3d - index into variable
#   Switch statement:
#   Switch $Foo
#     Case 123
#       L3 %d
#     Case 255
#       L4 %d
#   End
#
#  Variables defined within a REPEAT loop are indexed
#  They can be referenced directly within the loop or
#  via index outside the loop

sub process_pattern {
  my ( $pat, @fh ) = @_;
  my $width;
  my @out;
  foreach ( @fh ) {
    push @out, [];
  }
  do_pattern( $pat, \$width, \@out, @fh );
}

# Returns non-zero on end of file
sub do_pattern {
  my ( $pat, $width, $out, @fh ) = @_;
  for my $fline ( @$pat ) {
    if ( ref($fline) ) {
      my $count = $fline->{count};
      my $subpat = $fline->{pattern};
      while ( $count != 0 ) {
	return 1 if do_pattern( $subpat, $width, $out, @fh );
	$count-- unless $count < 0;
      }
    } else {
      my $line = $fline;
      while ( $line !~ m/^\s*$/ ) {
	last if $line =~ m/^\s*#/;
	if ( $line =~ s/^\s*Width\s*(\d+)// ) {
	  $$width = $1;
	} elsif ( $line =~ s/^\s*\$// ) {
	  flush_out( $width, $out );
	} elsif ( $line =~ s/^\s*"([^"]*)"// ) {
	  do_quote( $out, $1 );
	} elsif ( $line =~ s/^\s*Z\*// ) {
	  do_readZ( $out, @fh );
	} elsif ( $line =~ s/^\s*([acCsSlLfdnN])(\d+)?\s+(%[.\w]+)// ) {
	  my $code = $1;
	  my $count = $2 || 1;
	  my $fmt = $3;
	  do_read( $code, $count, $fmt, $out, @fh );
	} elsif ( $line =~ s/^\s*A(\s*%[\w.]+)?// ) {
	  do_addr( $out, $1 || '%04X', @fh );
	} else {
	  $line =~ s/\s*$//;
	  die "Invalid format: '$line'\n";
	}
      }
    }
  }
  return 0;
}

sub do_addr {
  my ( $out, $fmt, @fh ) = @_;
  for my $i ( 0 .. $#fh ) {
    my $fpos = tell $fh[$i];
    push @{$out->[$i]}, "Addr:", sprintf $fmt, $fpos;
  }
}

sub do_quote {
  my ( $out, $quote ) = @_;
  for my $col ( @$out ) {
    push @$col, $quote;
  }
}

sub do_readZ {
  my ( $out, @fh ) = @_;
  my $size = 80;
  for my $i ( 0 .. $#fh ) {
    my $data;
    my $fpos = tell $fh[$i];
    read $fh[$i], $data, $size;
    my $text = unpack( "Z$size", $data );
    my $trusize = length($text)+1;
    $trusize = 4 if $trusize < 4;
    $trusize++ if $trusize%2;
    if ( $trusize < $size ) {
      seek $fh[$i], $trusize-$size, 1;
    }
    push @{$out->[$i]}, $text;
  }
}

sub do_read {
  my ( $code, $count, $fmt, $out, @fh ) = @_;
  my $size = $sizes{$code} * $count;
  for my $i ( 0 .. $#fh ) {
    my $data;
    my $packcode = "$code$count";
    my $text;
    read $fh[$i], $data, $size;
    if ( $code eq 'a' ) {
      $text = $data;
      $text =~ s/[^[:print:]]/./g;
      $packcode = "C$count";
    }
    my @cdata = unpack( $packcode, $data );
    for my $cdata ( @cdata ) {
      push @{$out->[$i]}, sprintf( $fmt, $cdata );
    }
    push @{$out->[$i]}, $text if defined $text;
  }
}

sub flush_out {
  my ( $width, $out ) = @_;
  for my $col ( @$out ) {
    my $text = join ' ', @$col;
    if ( length($text) >= $$width ) {
      $$width = length($text) + 1;
      warn "Expanding width to $$width\n";
    }
    print $text, ' ' x ($$width - length($text));
    @$col = ();
  }
  print "\n";
}

# Returns an array ref to a pattern
sub load_pattern {
  my $filename = shift @_;
  my $fh;
  open $fh, "<$filename" ||
    die "Unable to read pattern file '$filename'\n";
  my $pat = read_pattern( $fh );
  close $fh || print "Error closing $filename\n";
  return $pat;
}

sub read_pattern {
  my $fh = shift @_;
  my $pat = [];
  while (my $line = <$fh>) {
    next if $line =~ m/^\s*#/;
    next if $line =~ m/^\s*$/;
    last if $line =~ m/^\s*END/;
    if ( $line =~ m/^\s*REPEAT(?:\s*(\d+))?/ ) {
      my $count = defined($1) ? $1 : -1;
      my $subpat = read_pattern($fh);
      $line = { count => $count, pattern => $subpat };
    }
    push( @$pat, $line );
  }
  return $pat;
}

sub open_ifiles {
  my @ifiles = @_;
  my @ifh;
  foreach my $filename (@ifiles) {
    my $ref;
    open( $ref, "<$filename" ) ||
      die "Could not open input file '$filename'\n"; 
    push( @ifh, $ref );
  }
  @ifh;
}
