#! /usr/bin/perl -w
use strict;
use Text::Wrap;
use POSIX;

# mksflow_gen <srcfile> name=<name>
# Generates the following:
#   <name>.tmc
#   <name>_col.tmc
#   <name>.cmd
#   # <name>_conv.tmc
#   <name>.genui

my $MKS_MAX_DRIVES = 3;
my $MKS_MAX_ADDRESS = 254;

my $srcfile = $ARGV[0] ||
  die "Must specify a source file\n";
my $name_cl = '';
my $Rate = '1';
my $Port = '/dev/ser1';
my $name_src = '';
my %Data;
my %Channel;
my @Index;
my $n_channels = 0;
my $linenum = 0;
if (@ARGV > 1) {
  if ($ARGV[1] =~ m/^name=([a-z][a-z0-9_]*)$/i ) {
    $name_cl = $1;
  } else {
    die "Invalid name specification: '$ARGV[1]'\n";
  }
}

open(my $ifh, "<", $srcfile)
  or die "Cannot open < $srcfile\n";

while (my $line = <$ifh>) {
  ++$linenum;
  chomp $line;
  next if $line =~ m/^\s*(?:#.*)?$/; # comment
  if ( $line =~ m|^\s*Rate\s+(\d+(?:/\d+)?)\s+Hz\s*|i ) {
    $Rate = $1;
  } elsif ( $line =~ m/^\s*Port\s+(\S+)\s*$/i ) {
    $Port = $1;
  } elsif ( $line =~ m/^\s*Name\s+([a-z]\w*)\s*$/i ) {
    die "$srcfile:$linenum: Name redefined\n"
      if $name_src ne '';
    $name_src = $1;
    die "$srcfile:$linenum: Name $name_src conflicts with commandline name=$name_cl\n"
      if $name_cl ne '' && $name_src ne $name_cl;
  } elsif ( $line =~ m,^\s* Data \s+ ([A-Za-z]\w+) \s+ (\d+) \s+
                        (MFC|MFM) \s+
                        ([0-9]+) \s+
                        (slm|sccm)
                        (?: \s+ "([^"]*)" )?
                        \s* $,ix ) {
    my ($datum,$channel,$chtype,$fullscale,$units,$text) =
      ($1,$2,lc($3),$4,lc($5),$6);
    die "$srcfile:$linenum: Datum $datum conflicts with earlier definition\n"
      if $Data{$datum};
    die "$srcfile:$linenum: Channel $channel already assigned\n"
      if $Channel{$channel};
    die "$srcfile:$linenum: Channel $channel out of range\n"
      if $channel > $MKS_MAX_ADDRESS || $channel < 1;
    die "$srcfile:$linenum: Number of drives exceeds arbitrary limit of $MKS_MAX_DRIVES\n"
      if $n_channels >= $MKS_MAX_DRIVES;
    if ($chtype eq 'mfc') {
      $text ||= $channel; # command defaults to channel mnemonic
    }
    my $prec = 4 - floor(log10($fullscale));
    $Data{$datum} = {
      index => $n_channels,
      channel => $channel,
      chtype => $chtype,
      fullscale => $fullscale,
      units => $units,
      prec => $prec,
      text => $text};
    $Channel{$channel} = $datum;
    push(@Index, $datum);
    ++$n_channels;
  } else {
    die "$srcfile:$linenum: Syntax error: '$line'\n";
  }
}

close($ifh) or warn "Error closing srcfile '$srcfile'\n";

my $Name = $name_src || $name_cl || "MKS";

open(my $tmc, ">", "$Name.tmc") ||
  die "$srcfile: Unable to write output file $Name.tmc\n";
open(my $col, ">", "${Name}_col.tmc") ||
  die "$srcfile: Unable to write output file ${Name}_col.tmc\n";
open(my $genui, ">", "${Name}.genui") ||
  die "$srcfile: Unable to write output file ${Name}.genui\n";
open(my $tbl, ">", "$Name.tbl") ||
  die "$srcfile: Unable to write output file $Name.tbl\n";
# open(my $conv, ">", "${Name}_conv.tmc") ||
  # die "$srcfile: Unable to write output file ${Name}_conv.tmc\n";
open(my $cmd, ">", "$Name.cmd") ||
  die "$srcfile: Unable to write output file $Name.cmd\n";
# Open the rest here also

my ($datadef, $coldef, @grpmem, $tbldef, $hktbldef, $cmddef,
    @status_genui);

$datadef = "TM $Rate Hz ${Name}_Stale_t ${Name}_Stale;\n";
$coldef .= "  ${Name}_Stale = ${Name}_obj->stale(255);\n";
push(@grpmem, "${Name}_Stale");

print $tmc <<EOF
%{
  /* mksflow driver interface */
  #define MKS_MAX_DRIVES $n_channels
  #include "mksflow.h"
  #define ${Name}_drive(x,y) ${Name}.drive[x].y
%}
TM typedef float ${Name}_Flow1_t { text "%7.1f"; }
TM typedef float ${Name}_Flow2_t { text "%7.2f"; }
TM typedef float ${Name}_Flow3_t { text "%7.3f"; }
TM typedef float ${Name}_Flow4_t { text "%7.4f"; }
TM typedef uint16_t ${Name}_Status_t { text "%04X"; }
TM typedef uint8_t ${Name}_ACK_t { text "%02X"; }
TM typedef uint8_t ${Name}_Stale_t { text "%3u"; }
TM typedef float ${Name}_Temp_t { text "%7.2f"; }
EOF
;

for (my $i = 0; $i < $n_channels; ++$i) {
  my $offset = $i;
  my $datum = $Index[$i];
  my $D = $Data{$datum};
  my $prec = $D->{prec};
  my $units = $D->{units};
  
  if ($D->{chtype} eq 'mfc') {
    $datadef .= "TM $Rate Hz ${Name}_Flow${prec}_t ${datum}_Set;\n";
    $coldef .= "  ${datum}_Set = ${Name}_drive($i,FlowSetPoint);\n";
    push(@grpmem, "${datum}_Set");
  }
  $datadef .= "TM $Rate Hz ${Name}_Flow${prec}_t ${datum}_Flow;\n";
  $coldef .=  "  ${datum}_Flow = ${Name}_drive($i,Flow);\n";
  $datadef .= "TM $Rate Hz ${Name}_Temp_t ${datum}_T;\n";
  $coldef .=  "  ${datum}_T = ${Name}_drive($i,DeviceTemp);\n";
  $datadef .= "TM $Rate Hz ${Name}_Status_t ${datum}_Status;\n";
  $coldef .=  "  ${datum}_Status = ${Name}_drive($i,DeviceStatus);\n";
  $datadef .= "TM $Rate Hz ${Name}_ACK_t ${datum}_ACK;\n";
  $coldef .=  "  ${datum}_ACK = ${Name}_drive($i,ACK);\n";
  $datadef .= "TM $Rate Hz ${Name}_Stale_t ${datum}_Stale;\n";
  $coldef .=  "  ${datum}_Stale = ${Name}_drive($i,Stale);\n";

  push(@grpmem, map "${datum}_$_", qw(Flow T Status ACK Stale));

  print $genui
    "  $Rate ${datum}_Status ${Name}_HK Status\n",
    "  $Rate ${datum}_Stale  ${Name}_HK Stale\n",
    "  $Rate ${datum}_ACK    ${Name}_HK ACK\n",
    "  $Rate ${datum}_T      ${Name}_HK Temp\n",
    (($D->{chtype} eq 'mfc') ?
      "  $Rate ${datum}_Set    $Name ${datum}_Flow\n"
      : ''),
    "  $Rate ${datum}_Flow   $Name ${datum}_Flow\n";

  my $setdisp = ($D->{chtype} eq 'mfc') ? "(${datum}_Set,7)" : '"          "';
  my $datumtbl =
    "  ${datum}: $setdisp (${datum}_Flow,7) $units;\n";
  $tbldef .= $datumtbl;
  
  $datumtbl =
    "  ${datum}: (${datum}_T,7) C (${datum}_Status,4) (${datum}_ACK,2) (${datum}_Stale,3);\n";
  $hktbldef .= $datumtbl;
  
  print $tbl
    "${datum}_v {\n",
    "  HBox { +-; Title: ${datum}; -+ };\n",
    "  Flow:   (${datum}_Flow,7) $units;\n",
    (($D->{chtype} eq 'mfc') ?
      "  Set_T:  (${datum}_Set,7)  $units;\n" : ''),
    "  T:      (${datum}_T,7)    C;\n",
    "  Status: (${datum}_Status,4);\n",
    "  ACK:    (${datum}_ACK,2);\n",
    "  Stale:  (${datum}_Stale,3);\n",
    "}\n\n";

  if ($D->{chtype} eq 'mfc') {
    my $text = $D->{text};
    my $channel = $D->{channel};
    if (!defined($text) || length($text) == 0) {
      $text = $datum;
    }
    my @text = split(' ', "$text Flow SetPoint");
    my $fword = scalar(@text)+1;
    $cmddef .=
      "  : " . join(' ', @text, '%f', "($units)", $units, '*') .
      " { if_${Name}.Turf(\"W$channel:1:%7.${prec}f\\n\", \$$fword); }\n";
  }
}

print $tmc
  "\n$datadef" ,
  'TM "Receive" ' . "$Name 1;\n\n" ,

  wrap("","    ", "Group $Name (" . join(', ', @grpmem) . ") {\n") ,
  $coldef ,
  "  ${Name}_obj->synch();\n}\n";

print $col
  "%{\n",
  "  #include \"mksflow.h\"\n",
  "  mksflow_t $Name;\n",
  "%}\n";

print $genui
  "  $Rate ${Name}_Stale ${Name}_HK Stale\n";

print $tbl
  "${Name}_flows {\n" ,
  "  HBox { +-; Title: $Name; -+ };\n" ,
  '  ""    >Set<        >Flow<;' . "\n",
  $tbldef,
  "  { HGlue 0+1 Stale: (${Name}_Stale,3) }\n",
  "}\n\n",
  "${Name}_hk {\n",
  "  HBox { +-; Title: \"$Name HK\"; -+ };\n" ,
  '  ""    >Temp<    "" >Status<        >ACK<        >Stale<;' . "\n",
  $hktbldef,
  "}\n";

if ( $cmddef ) {
print $cmd <<EOF
%INTERFACE <$Name>

&command
$cmddef  ;
EOF
;
}

close($tmc) || warn "$srcfile: Error closing output file $Name.tmc\n";
close($col) || warn "$srcfile: Error closing output file ${Name}_col.tmc\n";
close($genui) || warn "$srcfile: Error closing output file ${Name}.genui\n";
close($tbl) || warn "$srcfile: Error closing output file $Name.tbl\n";
# close($conv) || warn "$srcfile: Error closing output file ${Name}_conv.tmc\n";
close($cmd) || warn "$srcfile: Error closing output file $Name.cmd\n";
