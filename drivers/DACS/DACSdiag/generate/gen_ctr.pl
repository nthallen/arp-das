#! /usr/bin/perl -w
# Responsible for generating
#  ctr.tmc
#  ctr_col.tmc
#  ctr_conv.tmc
#  ctr.tbl

my $srcdir = $ARGV[0];
my $n_ctr_bds = $ARGV[1] || die "Must specify CTR_UG_N_BDS\n";
my $odir = $srcdir || ".";
-d $srcdir || die "Source directory '$srcdir' not found\n";
open( my $tmc, '>', "$srcdir/ctr.tmc" ) ||
  die "Unable to write to '$srcdir/ctr.tmc'\n";
open( my $col, '>', "$srcdir/ctr_col.tmc" ) ||
  die "Unable to write to '$srcdir/ctr_col.tmc'\n";
open( my $conv, '>', "$srcdir/ctr_conv.tmc" ) ||
  die "Unable to write to '$srcdir/ctr_conv.tmc'\n";
open( my $tbl, '>', "$srcdir/ctr.tbl" ) ||
  die "Unable to write to '$srcdir/ctr.tbl'\n";

print $col
  "%{\n",
  "  /* ctr_col.tmc generated by gen_ctr.pl */\n",
  "  #include \"subbus.h\"\n\n",
  "  static void Ct64_init( void ) {\n";

print $conv <<EOF
%{
  /* ctr_conv.tmc generated by gen_ctr.pl */
  const char *CtrOvf_text[] = { "  ", " *", "* ", "**" };
  const char *CtrLatch_text[] = { "  ", " L", "S ", "SL" };
%}
TM typedef unsigned char CtrOvf { text "%2d" CtrOvf_text[]; }
TM typedef unsigned char CtrLatch { text "%2d" CtrLatch_text[]; }

EOF
;

my @ctr_bds;

print $tmc
  "%{\n  /* ctr.tmc generated by gen_ctr.pl */\n",
  "  #include \"subbus.h\"\n",
  "%}\n";
for my $ctr_bd ( 0 .. $n_ctr_bds-1 ) {
  my $bdname = "Ctr_${ctr_bd}";
  push( @ctr_bds, $bdname );
  print $tbl
    "$bdname {\n",
    "  HBox { +-; Title: \"Ctr Bd $ctr_bd\"; -+ };\n";

  my $base = 0x600 + $ctr_bd * 0x20;
  my $stataddr = sprintf( "0x%X", $base );
  my $statname = "Ct${ctr_bd}Stat";

  my $LStat = "Ct${ctr_bd}Latch";
  print $conv
    "CtrLatch $LStat; invalidate $LStat;\n",
    "{ $LStat = ($statname >> 14) & 3; Validate $LStat; }\n";

  my @ctrs;
  for my $ctr ( 0 .. 3 ) {
    my $addr = sprintf( "0x%X", $base + 0x10 + $ctr * 4 );
    my $name = "Ctr_${ctr_bd}" . qw(A B C D)[$ctr];
    print $tmc
      "TM 8 Hz CT24 $name; Address $name $addr;\n";
    push( @ctrs, $name );
    my $OStat = "Ct${ctr_bd}" . qw(A B C D)[$ctr] . "Ovf";
    print $conv
      "CtrOvf $OStat; invalidate $OStat;\n",
      "{ $OStat = (($statname >> $ctr) & 1) + (($statname >> ($ctr+3)) & 2);\n",
      "  Validate $OStat; }\n";
    print $tbl
      "  ", qw(A B C D)[$ctr],
      ": HBox{ ($name,8); ($OStat,2); };\n";
  }
  print $tmc
    "TM 8 Hz Ctstat $statname; Address $statname $stataddr;\n\n",
    "Group Cts${ctr_bd} ( $statname, ",
    join( ", ", @ctrs ), " ) {\n",
    "  $statname = sbrwa( $statname.address );\n",
    map( "  $_.low  = sbrwa( $_.address );\n" .
	 "  $_.high = sbrba( $_.address+2 );\n", @ctrs ),
    "}\n\n";
  print $col "    sbwr( $stataddr, 0x0100 ); /* 8 Hz */\n";
  print $tbl "  L: ($LStat,2);\n}\n\n";

}

print $col "  }\n%}\nTM INITFUNC Ct64_init();\n";

print $tbl "{ HBox { |; ",
  map( "[$_]; |;", @ctr_bds ),
  " };\n",
  "  -;\n",
  "  >{ Time: (flttime,8) MFCtr: (MFCtr,5) }\n",
  "}\n";

close $tmc;
close $col;
close $conv;
close $tbl;
