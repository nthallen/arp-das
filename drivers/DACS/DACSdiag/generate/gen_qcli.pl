#! /usr/bin/perl -w
# Responsible for generating qclis.cmd qcli.tmc qcli_col.tmc qcli_conv.tmc qcli.tbl

my $srcdir = $ARGV[0];
my $n_qcli = $ARGV[1] || die "Must specify N_QCLICTRL\n";
my $odir = $srcdir || ".";
-d $srcdir || die "Source directory '$srcdir' not found\n";
open( my $tmc, '>', "$srcdir/qcli.tmc" ) ||
  die "Unable to write to '$srcdir/qcli.tmc'\n";
open( my $cmd, '>', "$srcdir/qclis.cmd" ) ||
  die "Unable to write to '$srcdir/qclis.cmd'\n";
open( my $tbl, '>', "$srcdir/qcli.tbl" ) ||
  die "Unable to write to '$srcdir/qcli.tbl'\n";
open( my $conv, '>', "$srcdir/qcli_conv.tmc" ) ||
  die "Unable to write to '$srcdir/qcli_conv.tmc'\n";
open( my $col, '>', "$srcdir/qcli_col.tmc" ) ||
  die "Unable to write to '$srcdir/qcli_col.tmc'\n";

my @suffixes = (0 .. $nqcli-1);
for my $i (0 .. $nqcli-1) {
  if ( $i < @ARGV ) {
    $suffixes[$i] = $ARGV[$i];
  }
}

my @qcli = map "QCLI_$suffixes[$_]", (0 .. $nqcli-1);
my @ssp = map "SSP_$suffixes[$_]", (0 .. $nqcli-1);

print $tmc <<EOF
%{
  /* qcli.tmc generated by gen_qcli.pl */
  #include "qclid.h"
  #include "sspdrv.h"
  const char * SSP_Status_Text(const unsigned char stat) {
    switch (stat) {
      case SSP_STATUS_GONE:    return "   Gone";
      case SSP_STATUS_CONNECT: return "Connect";
      case SSP_STATUS_READY:   return "  Ready";
      case SSP_STATUS_ARMED:   return "  Armed";
      case SSP_STATUS_TRIG:    return "Trigger";
      default:                 return "*******";
    }
  }
%}

TM typedef unsigned char SSP_Status_t { text "%7d" SSP_Status_Text(); }
TM typedef unsigned short XLONG { text "%5d"; }

/* T_FPGA_t: MAX6628 output, resolution 1/16 degree
 *   reported as 128 bits per degree celcius */
TM typedef signed short T_FPGA_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_FPGA_t, CELCIUS ) { 0, 0, 128, 1 }

/* T_HtSink_t: MAX6661 output. resolution 1/8 degree
  *  reported as 256 bits per degree */
TM typedef signed short T_HtSink_t { convert CELCIUS; text "%6.2lf"; }
Calibration ( T_HtSink_t, CELCIUS ) { 0, 0, 256, 1 }

EOF
;

for my $QCLI ( @qcli ) {
  print $tmc <<EOF
TM "Receive" ${QCLI} 1;

TM typedef unsigned short ${QCLI}_Wave_t { text "%10d" ${QCLI}_Wave_text(); }
TM 1 Hz ${QCLI}_Wave_t ${QCLI}_Wave;
TM 1 Hz UINT ${QCLI}_s;
TM 1 Hz UINT ${QCLI}_Stale;

Group ${QCLI}_grp ( ${QCLI}_Wave, ${QCLI}_s ) {
  ${QCLI}_Wave = ${QCLI}.qcli_wave;
  ${QCLI}_s = ${QCLI}.status;
  ${QCLI}_Stale = ${QCLI}_obj->stale();
  ${QCLI}_obj->synch();
}
EOF
  ;
}

for my $SSP ( @ssp ) {
  print $tmc <<EOF
TM "Receive" ${SSP} 1;

TM 1 Hz L20 ${SSP}_Num;
TM 1 Hz L20 ${SSP}_SN;
TM 1 Hz L20 ${SSP}_TS;
TM 1 Hz XLONG ${SSP}_Flags;
TM 1 Hz SSP_Status_t ${SSP}_Status;
TM 1 Hz UINT ${SSP}_Stale;
TM 1 Hz T_FPGA_t ${SSP}_T_FPGA;
TM 1 Hz T_HtSink_t ${SSP}_T_HtSink;

Group ${SSP}_grp ( ${SSP}_Num, ${SSP}_SN, ${SSP}_TS, ${SSP}_Flags,
		 ${SSP}_T_FPGA, ${SSP}_T_HtSink ) {
  ${SSP}_Num = ${SSP}.index;
  ${SSP}_SN = ${SSP}.ScanNum;
  ${SSP}_TS = ${SSP}.Total_Skip;
  ${SSP}_Flags = ${SSP}.Flags;
  ${SSP}_Status = ${SSP}.Status;
  ${SSP}_T_FPGA = ${SSP}.T_FPGA & 0xFFF8;
  ${SSP}_T_HtSink = ${SSP}.T_HtSink & 0xFFE0;
  ${SSP}_Stale = ${SSP}_obj->stale();
  ${SSP}_obj->synch();
}
EOF
  ;

# qclis.cmd

print $cmd <<EOF
%{

#ifdef SERVER
  #include "hsatod.h"
  #define QCLI_ICOS \
      (HSAD_OPT_A|HSAD_OPT_B|HSAD_OPT_C|HSAD_TRIG_3|HSAD_TRIG_RISING)
EOF
  ;

for my $SSP ( @ssp ) {
  print $cmd "  hsatod_setup_t ${SSP}_setup;\n"
}

print $cmd <<EOF
  static struct sspqcli_s {
    hsatod_setup_t *setup;
    cmdif_rd *if_ssp;
  } sspqcli_bd[1] = {
EOF
  ;

print $cmd map "    { &$ssp[$_]_setup, &if_$ssp[$_] },\n", (0 .. $#qcli), <<EOF
  };

#endif

%}
EOF
  ;

print $cmd
  map( "%INTERFACE <$_>\n", @ssp, @qcli ),
  "# &SSP returns an index into sspqcli_bd[]",
  "&SSP <int>\n",
  map( "  : $ssp[$_] { \$0 = $_; }\n", (0 .. $#ssp) ),
  "  ;\n",
  "# &QCLI returns an index into sspqcli_bd[]",
  "&QCLI <cmdif_rd *>\n",
  map( "  : $_ { \$0 = if_$_; }\n", @qcli),
  "  ;\n";

for my $QCLI ( 0 .. $#qcli ) {
  print $cmd <<EOF
&command
  : Select $qcli[$QCLI] Waveform &$qcli[$QCLI]_Wave * {
      *sspqcli_bd[$QCLI].setup = $qcli[$QCLI]_Waves[\$4];
      if_$ssp[$QCLI].Turf( "SW:%d\n", \$4 );
    }
  ;
EOF
;

