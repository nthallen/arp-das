/* Definition of waveform names. */
ATTR Key : DefTableKey;
RULE: ICOSWave ::= 'ICOS' 'Waveform' DefIdent '{' ICOSCmds '}' END;
RULE: DefIdent ::= Ident COMPUTE DefIdent.Sym = Ident; END;
SYMBOL DefIdent INHERITS IdDefScope, Unique COMPUTE
  IF (NOT (THIS.Unique),
	  message (ERROR, CatStrInd ("Waveform is multiply defined: ", THIS.Sym),
			   0, COORDREF));
END;

SYMBOL Wave COMPUTE SYNT.Key = CONSTITUENT DefIdent.Key; END;

/* Make sure only one Tz is defined per waveform */
SYMBOL TzDef INHERITS TzUnique COMPUTE
  INH.Key = INCLUDING Wave.Key; 
  IF (NOT (THIS.TzUnique),
	  message (ERROR, "Tz is multiply defined: ", 0, COORDREF));
END;

/* Make sure only one Iz is defined per waveform */
SYMBOL IzDef INHERITS IzUnique COMPUTE
  INH.Key = INCLUDING Wave.Key; 
  IF (NOT (THIS.IzUnique),
	  message (ERROR, "Iz is multiply defined: ", 0, COORDREF));
END;

/* Make sure only one Ncoadd is defined per waveform */
SYMBOL NcoaddDef INHERITS NcoaddUnique COMPUTE
  INH.Key = INCLUDING Wave.Key; 
  IF (NOT (THIS.NcoaddUnique),
	  message (ERROR, "Ncoadd is multiply defined: ", 0, COORDREF));
END;

/* Make sure only one Sample is defined per waveform */
SYMBOL NsampleDef INHERITS SampleUnique END;
SYMBOL RateDef INHERITS SampleUnique END;
CLASS SYMBOL SampleUnique COMPUTE
  INH.Key = INCLUDING Wave.Key; 
  IF (NOT (THIS.SampleUnique),
	  message (ERROR, "Only one definition of Nsample or SampleRate is allowed: ", 0, COORDREF));
END;

/*-------------------------------------------------------------------*/
/* Istart, Istop and Tramp */
ATTR dIdt,Istart,Istop,Tramp,Value: double;
ATTR dIdtAssessed: VOID;
ATTR WaveKey : DefTableKey;
RULE: Current ::= FloatVal CurrentUnit COMPUTE
  Current.Value = MUL(FloatVal.Value,CurrentUnit.Value);
END;
RULE: Time ::= FloatVal TimeUnit COMPUTE
  Time.Value = MUL(FloatVal.Value,TimeUnit.Value);
END;
RULE: CurrentUnit ::= 'A' COMPUTE CurrentUnit.Value = 1; END;
RULE: CurrentUnit ::= 'mA' COMPUTE CurrentUnit.Value = 0.001; END;
RULE: CurrentUnit ::= 'uA' COMPUTE CurrentUnit.Value = 0.000001; END;
RULE: TimeUnit ::= 'sec' COMPUTE TimeUnit.Value = 1; END;
RULE: TimeUnit ::= 'msec' COMPUTE TimeUnit.Value = 0.001; END;
RULE: TimeUnit ::= 'usec' COMPUTE TimeUnit.Value = 0.000001; END;
RULE: FloatVal ::= Integer COMPUTE FloatVal.Value = CAST(double,Integer); END;
RULE: FloatVal ::= Float COMPUTE FloatVal.Value = atof(StringTable(Float)); END;

/* Make sure only one dIdt is defined per waveform */
RULE: dIdt ::= 'dI' '/' 'dt' '=' Current '/' TimeUnit COMPUTE
  dIdt.Value = DIV(Current.Value,TimeUnit.Value);
END;
SYMBOL dIdt COMPUTE
  INH.Key = INCLUDING Wave.Key; 
  SYNT.dIdtAssessed = ORDER(
	SetdIdtDefined(THIS.Key,1,2),
	ResetdIdt(THIS.Key, THIS.Value ));
  IF(EQ(GetdIdtDefined(THIS.Key,0),2),
	  message (ERROR, "dI/dt is multiply defined: ", 0, COORDREF))
	    <- INCLUDING ICOSWave.dIdtAssessed;
END;

SYMBOL ICOSWave COMPUTE
  INH.Key = INCLUDING Wave.Key;
  SYNT.dIdtAssessed = CONSTITUENTS ( ICOSRamp.dIdtAssessed, dIdt.dIdtAssessed );
  IF(EQ(GetdIdtDefined(THIS.Key,0),0),
    message(ERROR, "dI/dt undefined: ", 0, COORDREF))
      <- THIS.dIdtAssessed;
END;

SYMBOL ICOSRamp COMPUTE
  SYNT.Key = NewKey();
  INH.WaveKey = INCLUDING Wave.Key;
  INH.dIdt = GetdIdt(THIS.WaveKey, 1.) <- INCLUDING ICOSWave.dIdtAssessed;
END;
RULE: ICOSRamp ::= 'Ramp' Istart Istop PrepTime COMPUTE
  ICOSRamp.dIdtAssessed = ORDER(
	SetdIdtDefined(ICOSRamp.WaveKey,1,2),
	ResetdIdt(ICOSRamp.WaveKey,DIV(SUB(Istop.Value,Istart.Value),PrepTime.Value)));
  IF(EQ(GetdIdtDefined(ICOSRamp.WaveKey,0),2),
	  message (ERROR, "dI/dt is multiply defined: ", 0, COORDREF))
	    <- INCLUDING ICOSWave.dIdtAssessed;
  ICOSRamp.Istart = Istart.Value;
  ICOSRamp.Istop = Istop.Value;
  ICOSRamp.Tramp = PrepTime.Value;
END;
RULE: ICOSRamp ::= 'Ramp' Istart Istop COMPUTE
  ICOSRamp.dIdtAssessed = 1;
  ICOSRamp.Istart = Istart.Value;
  ICOSRamp.Istop = Istop.Value;
  ICOSRamp.Tramp = DIV(SUB(Istop.Value,Istart.Value),ICOSRamp.dIdt);
END;
RULE: ICOSRamp ::= 'Ramp' Istart PrepTime COMPUTE
  ICOSRamp.dIdtAssessed = 1;
  ICOSRamp.Istart = Istart.Value;
  ICOSRamp.Istop = ADD(Istart.Value,MUL(PrepTime.Value,ICOSRamp.dIdt));
  ICOSRamp.Tramp = PrepTime.Value;
END;
RULE: ICOSRamp ::= 'Ramp' Istop PrepTime COMPUTE
  ICOSRamp.dIdtAssessed = 1;
  ICOSRamp.Istart = SUB(Istop.Value,MUL(PrepTime.Value,ICOSRamp.dIdt));
  ICOSRamp.Istop = Istop.Value;
  ICOSRamp.Tramp = PrepTime.Value;
END;
SYMBOL Istart COMPUTE SYNT.Value = CONSTITUENT Current.Value; END;
SYMBOL Istop COMPUTE SYNT.Value = CONSTITUENT Current.Value; END;
SYMBOL PrepTime COMPUTE SYNT.Value = CONSTITUENT Time.Value; END;
