%----------------------------------------------------------------
% New Strategy
%  PTGProgram
%    header
%    $1=trigger definitions
%    $2=region declarations RegDecl  PTGRegionDecl
%    $3=average declarations AverageDecl
%        (collected globally)
%    $4=depending on ($1=Rate) {
%       $2=elapsed calculations ElpasedCalc
%    }
%    $5=Region Calculations RegCalc PTGRegionCalc
%    $6=Average_Point()s PTGAveragePt GetAvgPtPtg
%       (collected globally)
%
%  Region Calculations
%    depending on ($Rate)
%      Region_$ = I
%    depending on ($Rate) {
%      Region_$_Completed = O
%      if (Region_$_Completed) {
%        Average_Value()s for this region
%      }
%    }
%
% Strategy: Chain through AvgVar's pushing names on the stack,
% then for each Region, loop through the names, adding to
% AvgDeclPtg, AvgPtPtg (both global) and AvgValPtg (by Region)
% Then loop back through the AvgVar's to clear the stack before
% advancing to the next Average. (Or simply ITERATE until the
% Stack is empty).
%----------------------------------------------------------------
ATTR ptg : PTGNode;
ATTR TrigDefPtg, ElapsedPtg, ElapsedCalc : PTGNode;
ATTR AverageDecl, AverageVal, AveragePt : PTGNode;

SYMBOL Program COMPUTE
  IF (NoErrors,
	PP_Out(
	  PTGProgram(
		SYNT.TrigDefPtg,
		THIS.RegDecl,
		SYNT.AverageDecl,
		PTGRatedDefs(
		  THIS.RateSpec,
		  SYNT.ElapsedCalc
		),
		THIS.RegCalc,
		SYNT.AveragePt
	  )
	)
  );
END;

%----------------------------------------------------------------
% Scope rules for Variables
%----------------------------------------------------------------
ATTR Sym : int;
SYMBOL Program INHERITS VarRootScope END;
SYMBOL Variable INHERITS VarIdDefScope END;
RULE: Variable ::= Name COMPUTE Variable.Sym = Name; END;

%----------------------------------------------------------------
% Region Name identification via $/Name/CScope.gnrc
%----------------------------------------------------------------
SYMBOL Program INHERITS RegionRootScope END;
SYMBOL RegionDef INHERITS RegionIdDefScope END;
SYMBOL Region INHERITS RegionIdUseEnv, RegionChkIdUse END;
RULE: Region ::= Name COMPUTE Region.Sym = Name; END;

%----------------------------------------------------------------
% Rate calculations
%----------------------------------------------------------------
CHAIN N_Rates : int;

ATTR RateSpec : PTGNode;
RULE: RateSpec ::= Integer 'Hz' COMPUTE
  RateSpec.RateSpec = PTGSeq(PTGId(Integer),PTGAsIs(" Hz"));
END;
RULE: RateSpec ::= Integer '/' Integer 'Hz' COMPUTE
  RateSpec.RateSpec =
	PTGSeq(
	  PTGBinOp(PTGId(Integer[1]),PTGAsIs("/"),PTGId(Integer[2])),
	  PTGAsIs(" Hz"));
END;  
RULE: RateSpec ::= Name COMPUTE
  RateSpec.RateSpec = PTGId(Name);
END;
SYMBOL Program COMPUTE
  CHAINSTART HEAD.N_Rates = 0;
  SYNT.RateSpec =
	IF (GT(TAIL.N_Rates,0),
	  CONSTITUENTS RateSpec.RateSpec
	  WITH (PTGNode, PTGSeq, IDENTICAL, PTGNull),
	  PTGAsIs("MFCtr")
	);
END;
SYMBOL RateSpec COMPUTE
  THIS.N_Rates = ADD(THIS.N_Rates,1);
  IF ( GT(THIS.N_Rates,0),
	message(ERROR,"Multiple Rates Specified", 0, COORDREF ));
END;
