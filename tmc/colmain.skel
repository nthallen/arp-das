/* Skeleton headers section */
/* colmain.skel Skeleton for collection main program
 * $Log$
 * Revision 1.4  2008/07/23 17:41:07  ntallen
 * Compilation tweaks
 *
 * Revision 1.3  2008/07/23 17:08:00  ntallen
 * First cut at QNX6 collection skeleton
 *
 * Revision 1.2  2008/07/03 20:58:07  ntallen
 * In the process of testing.
 *
 * Revision 1.1  2008/07/03 15:11:07  ntallen
 * Copied from QNX4 version V1R9
 */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#include <sys/types.h>
#include <unistd.h>
#include "nortlib.h"
#include "oui.h"
#include "tm.h"
#include "Collector.h"

static char cmrcsid[] =
      "$Id$";

%headers%

/* Skeleton console_functions section */
/* Photon and resource manager probably don't mix */
%console_functions%

/* Skeleton data_defs section */
/* Some temporary defs until everything is in the right place */
#ifndef TS_MFC_LIMIT
  #define TS_MFC_LIMIT 32767
#endif

/* for debugging */
int check_ts = 1;

#define incmod(x,y) if (x==((y)-1)) x = 0; else x++

//static short rowlets;

#if (NROWMINF == 1)
  #define MINF_ROW 0
  #define MINF_ROW_INC
#else
  #define MINF_ROW collector::minf_row
  #define MINF_ROW_INC incmod(collector::minf_row,NROWMINF)
#endif
unsigned short collector::minf_row = 0;
unsigned short collector::majf_row = 0;

%data_defs%

/* Skeleton main_program section */
// ### Make collector a #define and create a subclass
// ### for subbus that overrides the event(dq_event_stop) and
// ### Collect_row() methods
int main(int argc, char **argv) {
  // oui_init_options(argc, argv);
  collector col;
  col.init();
  col.operate();
  return 0;
}

%main_program%

/* Skeleton pre_other section */
/**
 * Called from a slow timer to make sure we aren't drifting.
 */
void collector::ts_check() {
  rowlets -= TRN;
  if (rowlets < LOWLIM || rowlets > HIGHLIM)
    ts_checks = TSCHK_RTIME | TSCHK_CHECK;
}

/**
 * Should come up with a test to guarantee that the right thing happens in all circumstances. 
 */
void collector::Collect_Row() {
  time_t rtime;
  long dt;
  
  #ifdef _SUBBUS_H
    tick_sic(); // probably implement this through inheritance
  #endif
  if (ts_checks & TSCHK_RTIME) {
    rtime = time(NULL);
    // It's only reasonable to check realtime at even second boundaries
    // This check assumes tm_info.t_stmp.mfc_num % MFSECNUM == 0
    if ((ts_checks & TSCHK_CHECK) && next_minor_frame%MFSECNUM == 0) {
      dt = (next_minor_frame - tm_info.t_stmp.mfc_num)/MFSECNUM;
      dt *= MFSECDEN;
      dt = rtime - dt - tm_info.t_stmp.secs;
      if (dt > SECDRIFT || dt < -SECDRIFT)
        ts_checks |= TSCHK_REQUIRED;
    }
  }
  if ((ts_checks & TSCHK_RTIME) && (ts_checks & TSCHK_REQUIRED)) {
    next_minor_frame = next_minor_frame % LCMMN;
    commit_tstamp( next_minor_frame, rtime );
  } else if ( next_minor_frame == 0 ) {
    //m* = (2^16)%lcm(M,n)
    //m1 = 0
    //t1 = t0 + d(2^16 - m* - m0)/n
    next_minor_frame = ROLLOVER_MFC;
    commit_tstamp( 0, tm_info.t_stmp.secs +
      MFSECDEN * ((long)USHRT_MAX - tm_info.t_stmp.mfc_num - next_minor_frame + 1) /
        MFSECNUM );
  } else if ( next_minor_frame - tm_info.t_stmp.mfc_num > TS_MFC_LIMIT) {
    // q = floor((m-m0)/n)
    // m1 = m0+q*n
    // t1 = t0 + d*(m1-m0)/n = t0 + d*q
    unsigned short q = (next_minor_frame - tm_info.t_stmp.mfc_num)/MFSECNUM;
    commit_tstamp( tm_info.t_stmp.mfc_num + q * MFSECNUM,
        tm_info.t_stmp.secs + MFSECDEN * q );
  }
  ts_checks = 0;
  if ( NROWMINF == 1 || MINF_ROW == NROWMINF-1 ) {
    /* Last row of minor frame: Synch Calculations */
    Synch = ( INVSYNCH && collector::majf_row == NROWMAJF-1) ?
      ~SYNCHVAL : SYNCHVAL;
  }

  if ( MINF_ROW == 0 ) {
    MFCtr = next_minor_frame;
    next_minor_frame++;
  }
  
  /* appropriate collection function */
  home = (union home_row *) row[last];
  efuncs[collector::majf_row]();
  rowlets += TRD;
  commit_rows(MFCtr, MINF_ROW, 1);
  MINF_ROW_INC;
  incmod(collector::majf_row, NROWMAJF);
}

%pre_other%

/* Skeleton COL_get_pointer section */
%COL_get_pointer%

/* Skeleton COL_recv_proxy section */
static void COL_recv_proxy(pid_t sent_tid, pid_t *prx, pid_t proxy) {
  if (*prx == 0) {
	*prx = proxy;
	reply_byte(sent_tid, DAS_OK);
  } else reply_byte(sent_tid, DAS_UNKN);
}

static void COL_end_proxy(pid_t sent_tid, pid_t *prx, struct colmsg *c) {
  c->u.proxy = *prx;
  c->type = *prx == 0 ? DAS_UNKN : DAS_OK;
  *prx = 0;
  Reply(sent_tid, c, sizeof(struct colmsg));
}
%COL_recv_proxy%

/* Skeleton COL_send section */
#ifdef COLRECVIMPLEMENTED
#include <stddef.h>

static void read_col_send( void *dest, size_t length,
					struct colmsg *cmsg, pid_t sent_tid ) {
  size_t trulen = min( length, cmsg->u.data.size );
  if ( trulen <= MAX_COLMSG_SIZE-5 ) {
	memcpy( dest, cmsg->u.data.data, trulen );
  } else {
	Readmsg( sent_tid,
	  offsetof( struct colmsg, u.data.data ), dest, trulen );
  }
}
#endif
%COL_send%

/* Skeleton DG_other_decls section */
#ifdef COLRECVIMPLEMENTED
%DG_other_decls%
/* Skeleton DG_other_cases section */
%DG_other_cases%
/* Skeleton "rest of the file" section */
#endif

#ifdef NEED_TIME_FUNCS
  #define ROWS(x) (((unsigned long)(x))*NROWMINF+MINF_ROW)
  #define FRACSECS(x) (((unsigned long)ROWS(x))*NSECSPER)

  long itime(void) {
      return(tm_info.t_stmp.secs +
        FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double dtime(void) {
      return(tm_info.t_stmp.secs +
        (double) FRACSECS(MFCtr-tm_info.t_stmp.mfc_num) / NROWSPER );
  }
  double etime(void) {
    double t;
    static double t0 = -1e9;
    
    t = dtime();
    if (t0 == -1e9) t0 = t;
    return(t - t0);
  }
#endif

/* Skeleton End of File */
