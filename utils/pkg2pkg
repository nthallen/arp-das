#! /bin/sh
#ifdef __USAGE
#%C <pkg> ...
#example: pkg2pkg perl sudo
#endif

if [ `id -u` != 0 ]; then
  exec /usr/pkg/bin/sudo $0 $*
fi

function nl_error {
  echo "pkg2pkg: $*" >&2
  exit 1
}

function nl_warn {
  echo "pkg2pkg: $*" >&2
}

proot=/var/huarp/pkg
pcache=/var/huarp/pkgcache


[ -z "$1" ] && nl_error "Usage: pkg2pkg <pkg> ..."
[ -d $proot ] || mkdir $proot || nl_error Unable to create $proot
[ -d $pcache ] || mkdir $pcache || nl_error Unable to create $pcache
pkgs=$*
pkg=''
pkgs=$*
processed=''

# is_member setname member
function is_member {
  typeset i set
  eval set=\"\$$1\"
  if [ -n "$set" ]; then
    for i in $set; do
      if [ "$2" = "$i" ]; then return 0; fi
    done
  fi
  return 1
}

# add_member setname member
# returns true (0) if member was not in set
# returns false (1) if member was in set
function add_member {
  if is_member $1 $2; then
    return 1
  else
    eval $1=\"\$$1 \$2\";
  fi
  return 0
}

# Assigns to pkg
function next_pkg {
  typeset first=''
  typeset others=''
  typeset ok
  typeset pr
  # echo "next_pkg: $pkgs"
  for pkg in $pkgs; do
    if ! is_member processed $pkg; then
      if [ -z "$first" ]; then
        first=$pkg
      else
        others="$others $pkg"
      fi
    fi
  done
  pkg=$first
  pkgs=$others
  # echo "arglist return: '$pkg'"
  [ -z "$pkg" ] && return 1
  add_member processed $pkg
  # processed="$processed $pkg"
  return 0
}

# Set pkgver to the best match for input pkg pattern
function pick_pkg {
  typeset pkg=$1
  typeset pkgcnt
  typeset pkgpat
  typeset ambig=no

  for pkgpat in "$pkg*" "$pkg-[0-9]*"; do
    pkgcnt=`ls -d /var/db/pkg/$pkgpat 2>/dev/null | wc -l`
    pkgcnt=${pkgcnt##*( )}

    case $pkgcnt in
      0) ;;
      1) pkgver=`ls -d /var/db/pkg/$pkgpat`
         return;;
      *) ambig=yes;;
    esac
  done
  # We failed
  if [ $ambig = yes ]; then
    echo >&2
    ls -d /var/db/pkg/$pkg* >&2
    nl_error "Package '$pkg' is ambiguous"
  else
    nl_error "Package '$pkg' not found"
  fi
}

function process_contents {
  cwd=usr/pkg
  ignore=''
  depends=''
  while read line; do
    case $line in
      "@cwd /usr/pkg") cwd=usr/pkg;;
      "@cwd .") cwd=${pkgver#/};;
      "@cwd "*) nl_error "Unexpected cwd line: '$line'";;
      "@pkgdep "*)
        # echo "$line" >&2
        dep=${line#@pkgdep }
        dep=${dep#\{}
        dep=${dep%\}},
        while [ -n "$dep" ]; do
          dep1=${dep%%,*}
          dep=${dep#*,}

          dep1=${dep1%>*}
          dep1=${dep1%<*}
          nl_warn "  $ppver requires $dep1"
          add_member depends $dep1
          # depends="$depends $dep1"
          add_member pkgs $dep1
          # pkgs="$pkgs $dep1"
        done;;
      "@ignore") ignore=y;;
      @*) ;;
      *) if [ -n "$ignore" ]; then ignore=''; else echo $cwd/$line; fi;;
    esac
  done <$pkgver/+CONTENTS
  find $pkgver -type f | sed -e 's,^/,,'
}

while [ -n "$pkgs" ]; do
  next_pkg || break;
  pick_pkg $pkg
  [ -d "$pkgver" ] || nl_error "Confused by pkg '$pkg': $pkgver"
  [ -f $pkgver/+CONTENTS ] || nl_error "No +CONTENTS in $pkgver"
  nl_warn "\nConverting  '$pkg' with '$pkgver'"
  ppver=`expr $pkgver : "/var/db/pkg/\\([a-zA-Z0-9_-]*-[0-9][0-9.]*\\)"`
  [ -z "$ppver" -o "$ppver" = "0" ] &&
    nl_error "Could not discern valid version from $pkgver"
  pver=`expr $ppver : "[a-zA-Z0-9_-]*-\\([0-9][0-9.]*\\)"`
  # expr can return "0" on no match, but since we already
  # matched this pattern, we can assume a "0" means version 0
  [ -z "$pver" ] &&
    nl_error "Could not discern valid version from $ppver"

  [ "/var/db/pkg/$ppver" = "$pkgver" ] ||
    nl_warn "  Truncating $pkgver to $ppver"
  archive=/var/huarp/pkgcache/$ppver.tar
  if [ -d "$proot/$ppver" ]; then
    nl_warn "  $proot/$ppver already exists: skipping"
    process_contents > /dev/null
  else
    mkdir "$proot/$ppver" ||
      nl_error Unable to create $proot/$ppver
    process_contents > $proot/$ppver/MANIFEST
    { echo "# Package $ppver via pkg2pkg $pkgver"
      echo "Version: $pver"
      [ -n "$depends" ] && echo "Requires:$depends"
      echo "Files: MANIFEST @ /"
      echo "Files: MANIFEST_pkg @ /"
    } > $proot/$ppver/Header
    for i in Header MANIFEST MANIFEST_pkg; do
      echo $proot/$ppver/$i | sed -e 's,^/,,'
    done > $proot/$ppver/MANIFEST_pkg
    rm -f ${archive}.gz
  fi
  if [ ! -f ${archive}.gz ]; then
    # cd /
    for MAN in MANIFEST MANIFEST_pkg; do
      /usr/local/sbin/pkg-preprocess-manifest $proot/$ppver/$MAN |
        tar -rf $archive --owner=0 --group=0 --no-recursion \
          -C / -T - ||
        nl_error "tar failed creating archive for $ppver from $MAN\n"
    done
    gzip $archive || nl_error "gzip $archive failed"
  else
    nl_warn "  ${archive}.gz already exists: skipping"
  fi
done
