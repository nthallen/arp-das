# This is the boilerplate doit script invoked by "." execution
# from doit scripts generated by mkdoit2
# Note that this script assumes you are running on the local
# machine, specifically that /dev/con == $NODE/dev/con.
# This assumption is used in several places.
# If I pick out the node from `tty`, then that node should
# be used for all condev questions.

typeset winrunning=no _scrptname=$0
typeset Experiment HomeDir FlightNode wait_for_node
typeset gcpid _scr0 doit_not doit_stop _scrdefs
typeset condev

namewait -t0 qnx/screen 2>/dev/null && winrunning=yes
if [ $winrunning = yes ] && [ -x /windows/bin/Notice ]; then
  function nl_error {
	Notice -Eat "$_scrptname" $* >&2
	getcon -q 2>/dev/null
	exit 1
  }
else
  function nl_error {
	echo "$_scrptname: $*" >&2
	getcon -q 2>/dev/null
	exit 1
  }
fi

if [ -t 0 ]; then
  condev=`tty`
  condev=${condev%%[0-9]}
  connode=`expr "$condev" : '^//\([0-9]*\)/'`
else
  connode=$NODE
fi

if [ $winrunning = yes ]; then
  if test $QW_WIN_DEV; then
	condev=//$connode/$QW_WIN_DEV
  elif ( sin -n $connode ver | grep Dev32 > /dev/null 2>&1 ); then
	condev=//$connode/D16/win
  else
	condev=//$connode/dev/win
  fi
  [ ! -c ${condev}1 ] && on -f $connode /windows/bin/wterm true
  [ ! -c ${condev}1 ] && nl_error Unable to start $condev
fi

typeset appname=`basename $0`
typeset curdir=`dirname $0`
[ -z "$_doit_basedir" ] && _doit_basedir=$curdir
cd $curdir
cfile=Experiment.config
[ ! -f "$cfile" ] && nl_error Cannot locate $cfile
. $cfile
[ -z "$Experiment" ] && nl_error Experiment undefined in $cfile
export Experiment
[ -n "$FlightNode" ] && export FlightNode

# PlayBack check is here for backwards compatability
# Future versions should all define LocalRing=PB
[ -n "$PlayBack" ] && LocalRing=PB
if [ -n "$LocalRing" ]; then
  export RemEx=$Experiment
  if [ "$LocalRing" = "IN" ]; then
	[ -n "$RemoteHost" ] || nl_error RemoteHost undefined
	export RemoteHost;
  fi
  Experiment=$Experiment.$LocalRing.$NODE.$$
  FlightNode=$NODE
fi

while getopts "W" option; do
  case $option in
	W) _scrdefs="yes";;
	\?) echo; exit 1;;
	*) echo Unsupported option: -$option; exit 1;;
  esac
done
let sval=$OPTIND-1
shift $sval

for i in ; do
  case $i in
    not) doit_not=yes;;
    stop) doit_stop=yes;;
    wait) wait_for_node=yes;;
    *) : ;;
  esac
done

if [ -n "$doit_not" -o -n "$doit_stop" ]; then
  [ -z "$_scrdefs" -a $winrunning = yes ] &&
	exec on -t $condev $0 -W $*

  _scr0=`tty`
  [ $winrunning = yes ] && winsetsize $_scr0 8 45 $appname

  [ -n "$doit_not" ] && {
	echo Deterring Startup of Experiment $Experiment
	echo Waiting for pick_file
	pick_file /dev/null
	# getcon -q 2>/dev/null
	exit 0
  } > $_scr0 2>&1

  [ -n "$doit_stop" ] && {
	if [ -z "$FlightNode" ]; then
	  FlightNode=`namewait -n0 -t0 -G parent 2>/dev/null`
	  if [ -z "$FlightNode" ]; then
		nl_error Unable to locate flight node for experiment $Experiment
	  fi
	fi
	echo Shutting down Experiment $Experiment on Node $FlightNode
	on -f $FlightNode /usr/local/bin/startdbr quit
	# getcon -q 2>/dev/null
	exit 0
  } > $_scr0 2>&1
fi

# start_rtg <script file>
function start_rtg {
  if [ $winrunning = yes ]; then
	namewait -t0 huarp/rtg 2>/dev/null || {
	  #generate a real config file here!
	  typeset cf=""
	  for f in ; do
		[ ! -f "$f" ] && ( {
		  echo "PO RP \"\""
		  echo "PC APC $f"
		  echo "PA"
		} > $f; ) 2>/dev/null
		[ -f "$f" ] && cf=$f && break
	  done
	  if [ -f "$cf" ]; then
		# if $connode != $NODE, this won't work...
		# we should run rtg on $connode and tell the ext app
		# to look for it there, but rtgapi.c doesn't support
		# that (yet). Alternately need to tell rtg the global
		# name of the winserver on $connode, but we don't
		# know that either.
		on -t //$connode/dev/con1 /windows/apps/rtg/rtg -f $cf
	  else
		Notice -Eat "Cannot Start RTG" "Unable to create config	file(s):\n '$*'"
	  fi
	}
  fi
}

_scr0=`tty`

typeset _msgopts _dcopts _cmdopts

if [ "$LocalRing" = "PB" ]; then
  datedir=$1
  [ ! -d "$datedir" ] &&
	nl_error "Playback requires a directory argument"

  #----------------------------------------------------------------
  # Make the assumption that the current script is either in
  # the current directory or in the path. Not true if invoked
  # with a full path from another directory, but unless _doit_basedir
  # is exported, we will have cd-ed to that directory by now.
  # Hence the assumption fails only if someone exports _doit_basedir
  # In any event, $curdir will equal $_doit_basedir except when
  # we have exec'd because the current directory is the incorrect
  # version.
  #----------------------------------------------------------------
  if [ "$curdir" = "$_doit_basedir" ]; then
	#----------------------------------------------------------------
	# Now check VERSIONs
	#----------------------------------------------------------------
	typeset VERSION MYPATH
	[ -f "$datedir/VERSION" ] && VERSION=`cat $datedir/VERSION`
	[ -z "$VERSION" ] && VERSION="1.0"
	[ -f "$datedir/tm.dac" ] || nl_error Unable to locate $datedir/tm.dac

	function eval_dir {
	  typeset bin=$1
	  typeset rv=1
	  if [ -d $bin -a -f $bin/tm.dac -a -x $bin/$appname ]; then
		typeset cur_version;
		[ -f $bin/VERSION ] && cur_version=`cat $bin/VERSION`
		[ -z "$cur_version" ] && cur_version="1.0"
		if [ $VERSION = "$cur_version" ]; then
		  cmp -s $datedir/tm.dac $bin/tm.dac ||
			nl_error $bin/tm.dac differs but VERSIONs do not
		  rv=0
		fi
	  fi
	  return $rv
	}
	typeset newdir
	for i in . bin/$VERSION $datedir/../bin/$VERSION; do
	  eval_dir $i && newdir=$i && break
	done
	[ -z "$newdir" ] &&
	  nl_error Unable to located compatible	VERSION
	if [ "$newdir" != "." ]; then
	  export _doit_basedir
	  datedir=`fullpath -t $datedir`
	  exec $newdir/$appname $datedir
	fi
  fi
else # not playback
  VERSION=1.0
  [ -f VERSION ] && VERSION=`cat VERSION`
  if [ -d "bin/$VERSION/" ]; then
	TMBINDIR=`fullpath -t "bin/$VERSION/"`
	PATH=$TMBINDIR:$PATH
  fi
fi
[ -z "$TMBINDIR" ] && TMBINDIR='.'
export TMBINDIR
