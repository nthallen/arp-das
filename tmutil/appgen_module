#! /usr/bin/perl -w
use strict;
use File::Compare;

# appgen_module <path> command substitutions
# The command gives us the option to support an interactive documentation
# query (maybe the default command) while appgen and appgen_module will
# invoke, say, the X command (for extract). Other commands might check
# syntax or something.

my $module = shift(@ARGV) ||
  die "No module specified\n";
my $command = shift(@ARGV) // 'help';
my $path; # The path to the module file
my $moddir; # Directory containing the module file (w/o trailing /)
my %CLvars = ( mode => 'default', rlvl => 0); # command line variables
my %Defvars = %CLvars; # variable defaults from Moduledef
my %Modevars; # variable defaults from Current Mode
my $mod_defined = 0;
my $linenum = 0;
my $currently_active = $command eq 'X';
my @active_stack;
my @extra_makefile;
my $rlvl_limit = 3;

# search for the module. This could look just for a file of the same name,
#   append '.agm', then if no path is specified, look in 'the usual places'.
#   I'd be tempted to look in /usr/local/share/huarp/appgen/ as well as
#   ../*/TM/ and ../*/*/TM/
my @searchpath = $module =~ m|/| ? ('') :
  map "$_/", ('.',<../*/TM>, <../Peripherals/*/TM>, '/usr/local/share/huarp');
pathcheck: while (@searchpath) {
  my $dir = shift(@searchpath);
  for my $suffix ( '', '.agm' ) {
    $path = "$dir$module$suffix";
    last pathcheck if -f $path;
    $path = '';
  }
}

$path || die "Unable to located module '$module'\n";
print "# Processing module '$module' at '$path'\n";
print "specdepbase = $path\n";
if ($path =~ m|^(.*)/[^/]+$|) {
  $moddir = $1;
} else {
  $moddir = '.';
}

# parse the rest of the command line
for my $arg (@ARGV) {
  if ($arg =~ m/^([a-zA-Z]\w*)=(\S*)$/) {
    $CLvars{$1} = $2;
  } else {
    die "Cannot parse command line argument '$arg'\n";
  }
}

if ($CLvars{rlvl} >= $rlvl_limit) {
  die "$path: Recursion limit $rlvl_limit reached\n";
}

for my $var (sort keys %CLvars) {
  print "# Command line var $var = '$CLvars{$var}'\n";
}

# Now open the file and process it
open(my $fh, '<', $path) ||
  die "Unable to open module file '$path'\n";

sub nextline {
  my $line = <$fh>;
  ++$linenum if defined($line);
  return $line;
}

sub skip_whitespace {
  my $line = shift @_;
  while (defined($line) && $line =~ m/^\s*(?:#.*)?$/ ) {
    $line = nextline();
  }
  defined($line) && $line =~ s/^\s*//;
  return $line;
}

# opt_vars($line)
# parses the remainder of $line and possibly following lines
# looking for '(' vardeflist ')'
# Returns an empty list if it sees anything except comments,
# whitespace or the open paren.
sub opt_vars {
  my $line = shift @_;
  my $start = $linenum;
  my %vars;
  $line = skip_whitespace($line);
  if ( $line =~ s/^\[\s*// ) {
    while (defined($line)) {
      $line = skip_whitespace($line);
      if ($line =~ s/^([a-zA-Z]\w*)=([^\]\s]*)//) {
        my ($var, $val) = ($1,$2);
        die "$path:$linenum: Variable '$var' redefined\n"
          if exists $vars{$var};
        $vars{$var} = exists($CLvars{$var}) ? $CLvars{$var} : $val;
      } else {
        return ($line, %vars) if $line =~ s/\]//;
        die "$path:$linenum: Syntax error inside opt_vars\n";
      }
    }
    die "$path:$linenum: EOF inside opt_vars starting at line $linenum\n";
  } else {
    return $line;
  }
}

sub subvars {
  my ($line, $vars) = @_;
  for my $var (keys %$vars) {
    my $val = $vars->{$var};
    $line =~ s/\@$var\@/$val/g;
  }
  return $line;
}

my $line = '';
while (1) {
  $line = skip_whitespace($line);
  if (!defined($line)) {
    last;
  } elsif ( $line =~ s/^\s*ModuleDef\s+([a-z]\w+)\b//i ) {
    die "$path:$linenum: Module redefined\n" if $mod_defined;
    die "$path:$linenum: Module definition inside mode\n" if @active_stack;
    my $modname = $1; # $1 is the reported module name
    ($line, %Defvars) = (opt_vars($line),
      'rlvl', $CLvars{rlvl}, 'mode', $CLvars{mode});
    %Modevars = %Defvars;
    $Modevars{MODDIR} = $moddir;
    $line = skip_whitespace($line);
    if ($command eq 'help') {
      print "Module $modname\n  Defined Variables:\n",
        map "    $_=$Defvars{$_}\n", sort keys %Defvars;
    }
    last unless defined($line);
    if ($line =~ s/^\{//) {
      while (defined($line)) {
        last if $line =~ s/^\}//;
        print $line if $command eq 'help';
        $line = nextline();
      }
    }
  } elsif ($line =~ s/^\s*mode\s*\(//i) {
    push(@active_stack, [$currently_active, {%Modevars}]);
    my %modes;
    $line = skip_whitespace($line);
    die "$path:$linenum: Unexpected EOF in mode reference\n"
      unless defined($line);
    if ($line =~ s/^([a-z]\w*)//i) {
      $modes{$1} = 1;
      while (defined($line)) {
        $line = skip_whitespace($line);
        if ($line =~ s/^\)//) {
          last;
        } elsif ($line =~ s/^,//) {
          $line = skip_whitespace($line);
          if ($line =~ s/^([a-z]\w*)//i) {
            $modes{$1} = 1;
          } else {
            die "$path:$linenum: Syntax error in mode reference\n";
          }
        }
      }
    } else {
      die "$path:$linenum: syntax error in mode reference\n";
    }
    ($line, my %newModevars) = opt_vars($line);
    for my $var (keys %newModevars) {
      die "$path:$linenum: mode variable '$var' not specified in ModuleDef\n"
        if !exists $Modevars{$var};
      $Modevars{$var} = $newModevars{$var};
    }
    $currently_active = 0 unless $modes{$CLvars{mode}};
    $line = skip_whitespace($line);
    die "$path:$linenum: Expected '{' after moderef\n"
      unless $line =~ s/^\{//;
  } elsif ($line =~ s/^\}//) {
    die "$path:$linenum: Unexpected '}' outside moderef\n"
      unless @active_stack;
    my $prev = pop @active_stack;
    $currently_active = $prev->[0];
    %Modevars = %{$prev->[1]};
  } elsif ($line =~ s/^([a-z]\w+|-)\s*([=:])\s*//i) {
    # variable = filelist: all on a single line
    if ($currently_active) {
      my $mkvar = $1;
      my $verb = $2;
      my @ofiles;
      $line = subvars($line, \%Modevars);
      if ($verb eq ':' || $mkvar =~ m/base$/) {
        my @files = split(" ", $line);
        for my $file (@files) {
          my ($tgt, $src);
          if ($file =~ m|^([^:/]+):([^:]*)$|) {
            $tgt = $1;
            $src = $2;
          } else {
            $src = $file;
          }
          if ($src =~ m|^/|) {
            # absolute path, leave as is
          } elsif ($src =~ m|/|) {
            # relative path, append to module dir
            $src = "$moddir/$src";
          } elsif (-f $src) {
            # file in the source directory, leave as is
          } elsif (-f "$moddir/$src") {
            $src = "$moddir/$src";
          }
          if ( $src ne '' && ! -f $src ) {
            die "Source file not found: '$src'\n";
          }
          if ($tgt && $src) {
            print "specdepbase = $src\n";
            print "spectgtbase = $tgt\n";
            my $dosubs = $src =~ m/\.in$/;
            my $tgttmp = "._$tgt";
            open(my $ifh, "<", $src) ||
              die "$path:$linenum: unable to open source file '$src'\n";
            open(my $ofh, ">", $tgttmp) ||
              die "$path:$linenum: unable to open target temp file '$tgttmp'\n";
            while (my $line = <$ifh>) {
              $line = subvars($line, \%Modevars) if $dosubs;
              print $ofh $line;
            }
            close($ifh);
            close($ofh);
            # Now compare $tgttmp to $tgt if it exists
            if (-f $tgt && compare($tgt, $tgttmp) == 0) {
              unlink($tgttmp);
            } else {
              unlink($tgt);
              rename($tgttmp, $tgt);
            }
            push(@ofiles, $tgt);
          } elsif ( $tgt ) {
            push(@ofiles, $tgt);
          } else {
            push(@ofiles, $src);
          }
        }
        print "$mkvar $verb ", join(' ', @ofiles), "\n"
          if $mkvar ne '-';
      } else {
        print "$mkvar $verb $line"
          if $mkvar ne '-';
      }
    }
    $line = '';
  } elsif ($line =~ s/^Module\s*//) {
    # Module reference: Only recurse if $currently_active
    # Should make sure to 
    if ($currently_active) {
      $line = subvars($line, \%Modevars);
      my $rlvl = $Defvars{rlvl}+1;
      $line =~ s|^([a-z][\w.]*)(?:\s+([\w.=\s]*))?$||i ||
        die "$path:$linenum: Invalid characters in Module Ref\n";
      my $refmod = $1;
      my $cmdtail = defined($2) ? $2 : '';
      open(my $mfh, "-|", "$0 $refmod X rlvl=$rlvl $cmdtail") ||
        die "$path:$linenum: Error recursing\n";
      while ($line = <$mfh>) {
        if ($line =~ m/^%%/) {
          while ($line = <$mfh>) {
            push(@extra_makefile, $line);
          }
          last;
        } else {
          print $line;
        }
      }
      close($mfh) || die "$path:$linenum: Error closing pipe for module $refmod\n";
    }
    $line = '';
  } elsif ($line =~ s/^%%.*$//) {
    while ($line = nextline()) {
      if (@active_stack && $line =~ s/^\s*\}//) {
        my $prev = pop @active_stack;
        $currently_active = $prev->[0];
        %Modevars = %{$prev->[1]};
        last;
      } else {
        $line = subvars($line, \%Modevars);
        push(@extra_makefile, $line) if $currently_active;
      }
    }
  } else {
    die "$path:$linenum: Unrecognized command\n";
  }
}
if (@extra_makefile) {
  print "%%\n", @extra_makefile;
}
