#! /bin/sh
# appgen Application Generator for the
# tmc/cmdgen/tmcalgo/etc family of compilers
#__USAGE
#%C	[-s] [spec file]
#	-s Do not include subbus support by default
#
#	Generates an application based on the spec_file input
#	If spec file isn't specified, appgen will look for a
#	file of the form *.spec. If there is a unique one, it
#	will be used.
#	appgen automatically overwrites the Makefile, so care
#	should be taken that it is not invoked where it is not
#	used.
#
# Spec_file format:
# # comment line
# prefix = <prefix>  (optional: derived from spec file name)
# tmcbase = <files>
# cmdbase = <files>
# NOSUBBUS
# CLEANDIST - Flag to distribute into the bin hierarchy
# var = substitution (supported vars are SRC TOOL OBJ TGT DISTRIB
#                     SCRIPT (source to be copied to $TGTDIR/bin/$VERSION)
#                     SRCDIST (source to be copied to $TGTDIR/bin/$VERSION/Base)
#                     IDISTRIB (to be copied to $TGTDIR)
#                     MNC (defaults to prefix)
#                     HOMEDIR (defaults to cwd, less node)
#                     TGTNODE TGTDIR
#                     SERVER (defaults if server is generated)
#                     SUBDIRS (passed on to Makefile)
#                     SUBDIRS4 (passed on to Makefile)
#                     NONRCS (backed up as SOURCE, but not RCSed)
# target : <files>
# ...
# %%
# <additional Makefile contents>
#
# The following target types are supported:
#   *algo   TMCBASE  dc usage
#   *col    TMCBASE  dg usage T1 etc.
#   *ext    TMCBASE  dc usage
#   *disp   TMCBASE  dc usage
#   *clt    CMDBASE  nl_cons, client usage
#   *srvr   CMDBASE  T1
#   *doit
#   *.dccc
#   *.sft
# The following source types are supported:
#   *tmc.prt
#   *ext.prt
#   *.edf
#   *.cfg
#   *.tbl
#   *.fld
#   *.tma
#   *.cyc
#   *.tmc
#	*.tmg
#   *cmd.prt
#   *.cmd
#   *.c
#   *.slp (soldrv proxy) ==> .sol and something else
#   *.oui
#   *.doit
#   *.DR
typeset subbus=yes cleandist=no
while getopts "s" option; do
  case $option in
	s) subbus=no;;
	\?) echo; exit 1;;
	*) echo Unsupported option: -$option; exit 1;;
  esac
done
let sval=$OPTIND-1
shift $sval

typeset ifile
if [ -n "$1" ]; then
  if [ -r $1 ]; then ifile=$1
  else
	echo Cannot find or read input file $1 >&2
	exit 1
  fi
else
  for i in *.spec; do
	if [ -r $i ]; then
	  if [ -n "$ifile" ]; then
		echo More than one .spec file found: *.spec >&2
		exit 1
	  else ifile=$i
	  fi
	fi
  done
fi

if [ -z "$ifile" ]; then
  echo No .spec file specified and none found >&2
  exit 1
fi

if [ -f Makefile -a Makefile -nt $ifile ]; then
  echo Makefile is up to date relative to $ifile
  exit 0
fi

#----------------------------------------------------------------
# Now redirect standard input and output to process the spec file
#----------------------------------------------------------------
exec <$ifile >Makefile

typeset targets prefix tmcbase cmdbase basetargets usage LINK usefiles
typeset ouis
typeset SERVER
typeset SRC TOOL SCRIPT IDISTRIB OBJ TGT MNC HOMEDIR DISTRIB SRCDIST TGTNODE TGTDIR

# is_member setname member
function is_member {
  typeset i set
  eval set=\"\$$1\"
  if [ -n "$set" ]; then
	for i in $set; do
	  if [ "$2" = "$i" ]; then return 0; fi
	done
  fi
  return 1
}

# add_member setname member
# returns true (0) if member was not in set
# returns false (1) if member was in set
function add_member {
  if is_member $1 $2; then
	return 1
  else
	eval $1=\"\$$1 \$2\";
  fi
  return 0
}

#----------------------------------------------------------------
# set_depname turns a filename into a shell variable name by mapping
# all [./] to _. If $kluge is the mapped name, n_$kluge is set to
# the actual filename and depname is set to d_$kluge. This is the
# name of the variable which will hold the dependents of this target.
#----------------------------------------------------------------
function set_depname {
  typeset old prefix suffix
  old=$1
  while :; do
	prefix=${old%%[./]*}
	if [ $old = $prefix ]; then break; fi
	eval suffix=\${old#$prefix[./]}
	old=${prefix}_$suffix
  done
  eval prefix=\"\$n_$old\"
  if [ -n "$prefix" ]; then
	if [ $prefix != $1 ]; then
	  echo Name kludge conflict between $1 and $prefix >&2
	  exit 1
	fi
  else
	eval n_$old=$1
  fi
  depname=d_$old
}

# in_this_dir file
# returns true (0) if file is in this directory
function in_this_dir {
  typeset bname
  bname=`basename $1`
  if [ $bname = $1 ]; then return 0
  fi
  return 1
}

# def_target target dependents
function def_target {
  typeset tgt deps dtdeps
  tgt=$1; shift
  deps="$*"
  in_this_dir $tgt ||
	{ echo Target $tgt is in another directory. >&2 &&
	  exit 1; }
  if is_member SRC $tgt; then
	echo Target $tgt conflicts with previous source definition >&2
	exit 1
  fi
  if add_member targets $tgt; then
	if [ -n "$basetargets" ]; then OBJ="$OBJ $tgt"; fi
	set_depname $tgt
	eval $depname=\"\$deps\"
	case $tgt in
	  *.fld) add_member DISTRIB $tgt;;
	esac
  else
	set_depname $tgt
	eval dtdeps=\"\$$depname\"
	if [ "$dtdeps" != "$deps" ]; then
	  echo Dependencies for target $tgt conflict with previous definition >&2
	  echo First: \"$dtdeps\" >&2
	  echo Second: \"$deps\" >&2
	  exit 1
	fi
  fi
}

function def_source {
  if is_member targets $1; then
	echo Source File $1 previously identified as target. >&2
	exit 1
  fi
  if in_this_dir $1; then
	add_member SRC $1
  fi
  case $1 in
	*.fld) add_member DISTRIB $1;;
	*.tma) add_member SRCDIST $1;;
	*.sol) add_member SRCDIST $1;;
  esac
}

add_member IDISTRIB Experiment.config
add_member IDISTRIB VERSION

#----------------------------------------------------------------
# This is where we read in the definitions
#----------------------------------------------------------------
while read tgt mode deps; do
  case "$tgt" in
	\#*) mode=#;;
	NOSUBBUS) subbus=no; mode="";;
	CLEANDIST) cleandist=yes; mode="";;
	%%) break;;
  esac
  if [ -n "$mode" ]; then
	case "$mode" in
	  \#) : ;;
	  =) for i in $deps; do add_member $tgt $i; done;;
	  :) case $tgt in
		   *algo) deps="$tmcbase $deps";;
		   *col) deps="$tmcbase $deps";;
		   *ext) deps="$tmcbase $deps";;
		   *disp) deps="$tmcbase $deps";;
		   *clt) deps="$cmdbase $deps";;
		   *srvr) deps="$cmdbase $deps"; SERVER=$tgt;;
		   *doit) : ;;
		   *.dccc) : ;;
		   *.sft) : ;;
		   *) : ;;
		 esac
		 for i in $deps; do
		   def_source $i
		 done
		 def_target $tgt $deps;;
	  *) echo Unknown mode $mode >&2 ;;
	esac
  fi
done

#----------------------------------------------------------------
# If not otherwise defined, the following targets are implicit,
# assuming appropriate source files are supplied in the BASE
# definition
#  ${prefix}clt
#  ${prefix}srvr
#----------------------------------------------------------------
if [ -z "$prefix" ]; then prefix=${ifile%%.*}; fi
if [ -n "$tmcbase" ]; then
  for i in $tmcbase; do add_member SRCDIST $i; done
fi

if [ -n "$cmdbase" ]; then
  is_member targets ${prefix}clt || {
	def_target ${prefix}clt $cmdbase
	for i in $cmdbase; do def_source $i; done
  }
  is_member targets ${prefix}srvr || {
	def_target ${prefix}srvr $cmdbase
	if [ -z "$SERVER" ]; then SERVER=${prefix}srvr; fi
	for i in $cmdbase; do def_source $i; done
  }
fi

#----------------------------------------------------------------
# replace_each from to rule dependents
#   Processes the list of dependents, replacing any ending in
#	the "from" pattern with a new dependent ending in the "to"
#	pattern. Adds the new dependent as a target in its own right
#	with the old dependent as a dependent.
# Returns TRUE if the substitution was applied
#----------------------------------------------------------------
function replace_each {
  typeset from to redeps rei ia new_i replaced

  replaced=1
  from=$1; to=$2; rule="$3"; shift; shift; shift
  for rei in $*; do
	ia=${rei%$from}
	if [ $ia$from = $rei ]; then
	  new_i=${ia##*/}$to
	  if [ -n "$rule" ]; then rei="$rei\n\t$rule $rei"; fi
	  def_target $new_i " $rei"
	  rei=$new_i
	  replaced=0
	fi
	redeps="$redeps $rei"
  done
  deps="$redeps"
  return $replaced
}

#----------------------------------------------------------------
# replace_all from to rule dependents
#  replace all files ending in the "from" pattern with a file
#  of the name "to", suffixing the rule to the dependents list
# Returns TRUE if the substitution was applied.
#----------------------------------------------------------------
function replace_all {
  typeset from to rule rai ia ra_deps new_deps replaced
  
  replaced=1
  from=$1; to=$2; rule="$3"; shift; shift; shift
  for rai in $*; do
	ia=${rai%$from}
	if [ $ia$from = $rai ]; then
	  if [ -z "$ra_deps" ]; then
		new_deps="$new_deps $to"
	  fi
	  ra_deps="$ra_deps $rai"
	else
	  new_deps="$new_deps $rai"
	fi
  done
  if [ -n "$ra_deps" ]; then
	def_target $to "$ra_deps$rule$ra_deps"
	replaced=0
  fi
  deps=$new_deps
  return $replaced
}

#----------------------------------------------------------------
# use_all from to rule dependents
#  use all files ending in the "from" pattern with a file
#  of the name "to", suffixing the rule to the dependents list
# Returns TRUE if the substitution was applied.
#----------------------------------------------------------------
function use_all {
  typeset from to rule rai ia ra_deps replaced
  
  replaced=1
  from=$1; to=$2; rule="$3"; shift; shift; shift
  for rai in $*; do
	ia=${rai%$from}
	[ $ia$from = $rai ] && ra_deps="$ra_deps $rai"
  done
  if [ -n "$ra_deps" ]; then
	def_target $to "$ra_deps$rule$ra_deps"
	replaced=0
	deps="$deps $to"
  fi
  return $replaced
}

#----------------------------------------------------------------
# Now process the definitions:
#  save the original targets in basetargets
#----------------------------------------------------------------
basetargets="$targets"

for i in $basetargets; do
  unset ouis
  add_member TGT $i
  set_depname $i
  eval deps=\"\$$depname\"
  replace_each tmc.prt .tmc "@\$(PRT2TMC)" $deps
  replace_each cmd.prt .cmd "@\$(PRT2CMD)" $deps
  replace_each ext.prt .edf "@\$(PRT2EDF)" $deps
  # This is a test:
  use_all .edf ${i}edf.oui "\n\t\$(EDF2OUI)" $deps
  replace_each .edf ext.tmc "\$(EDF2EXT)" $deps
  replace_each .cfg attr.tmc "\$(DATAATTR)" $deps
  replace_each .cyc cyc.tmc  "\$(CYCLE)" $deps
  replace_each .tbl .fld "\$(TABLE)" $deps
  replace_all .fld $i.tmc "\n\t\$(FLD2DISP)" $deps &&
	add_member ouis nl_cons
  replace_all .tmg ${i}tmg.tmc "\n\t\$(TMG2TMC)" $deps &&
	add_member ouis tmg
  replace_each .DR ${i}DR.tmc 'DR2tmc >$@' $deps &&
	add_member ouis drext
  if replace_all .tma ${i}a.tmc " $SERVER\n\t\$(SERVER) $SERVER\n\t\$(TMCALGO)" $deps
  then
	if [ -z "$SERVER" ]; then
	  echo No command server defined >&2; exit 1
	fi
	add_member ouis tma
  fi
  case $i in
	*col)
	  if replace_all .tmc $i.c "\n\t\$(TMC.col)" $deps; then
		add_member ouis collect
		add_member ouis seteuid
		[ "$subbus" = "yes" ] && add_member ouis subbus_reqd
		add_member DISTRIB ${i%col}.pcm
		add_member DISTRIB tm.dac
		add_member OBJ ${i%col}.pcm
		add_member OBJ tm.dac
	  fi;;
	*)
	  replace_all .tmc $i.c "\n\t\$(TMC)" $deps &&
		add_member ouis dc;;
  esac
  case $i in
	*sft)
	  replace_each .slp slp.sol "\$(SLP2SOL)" $deps;;
    *)
	  replace_all .slp ${prefix}slp.cmd "\n\t\$(SLP2CMD)" $deps;;
  esac
  if replace_all .cmd ${prefix}cmd.c "\n\t\$(CMDGEN) -d ${prefix}cmd.dat" $deps
  then
	add_member OBJ ${prefix}cmd.dat
  fi
  case $i in
	*clt)
	  if replace_all cmd.c $i.o "\n\t\$(COMPILE.clt)" $deps; then
		add_member ouis kbdclt
	  else
		echo Client $i with no cmd.c files >&2; exit 1;
	  fi;;
	*srvr)
	  if replace_all cmd.c $i.o "\n\t\$(COMPILE.srvr)" $deps
	  then
		add_member ouis server
		add_member ouis seteuid
		[ "$subbus" = "yes" ] && add_member ouis subbus_opt
	  else
		echo Server $i with no cmd.c files >&2; exit 1;
	  fi;;
  esac
  #----------------------------------------------------------------
  # We'll delay handling the rest of the .c files (and the .oui files)
  # until we decide if these are really executable.
  #----------------------------------------------------------------

  unset LINK
  case $i in
	*col)   LINK=priv;;
	*clt)   LINK=norm;;
	*srvr)  LINK=priv;;
	*.dccc) por="\$(LIBSRC)/dccc.por"
			deps="$deps $por\n\t@\$(DCCC)$deps";;
	*.sft)  set -- $deps
			if [ $# -gt 1 ]; then
			  deps="$deps\n\t\$(SOLFMT) $deps"
			else
			  deps="$deps\n\tsolfmt -o$i $deps"
			fi;;
	*doit)	deps="$deps\n\tmkdoit2 -o $i $deps && chmod a+x $i"
		    add_member IDISTRIB $i;;
	*)      LINK=norm;;
  esac

  if [ -n "$LINK" ]; then
	unset ouifiles ouiout
	add_member ouis msg
	for j in $ouis; do
	  ouifiles="$ouifiles \$(OUIDIR)/$j.oui"
	done
	deps="$deps$ouifiles"
	replace_all .oui ${i}oui.c "\n\t\$(OUI)" $deps &&
	  ouiout=${i}oui.c
	replace_each .c .o "" $deps
	deps="$deps\n\t\$(LINK.$LINK)$deps"
	[ -n "$ouiout" ] &&	deps="$deps\n\t\$(OUIUSE) $ouiout"
	if [ $LINK = priv ]; then deps="$deps\n\tpromote $i"; fi
  fi

  set_depname $i
  eval $depname=\"\$deps\"
done

#----------------------------------------------------------------
# Clean up a little
#----------------------------------------------------------------
unset -f replace_each replace_all

# output_macro name definition
# outputs name=definition, but adds continuation characters
# to make it look nice (eventually)
function output_macro {
  typeset name i line
  name=$1; shift
  echo -n "$name="
  width=${#name}+1
  for i in $*; do
	let width=$width+${#i}+1
	if [ $width -ge 70 ]; then
	  echo -n "$line\n$name+="
	  width=${#name}+2+${#i}
	  line=$i
	elif [ -n "$line" ]; then line="$line $i"
	else line="$i"
	fi
  done
  echo "$line"
}

#----------------------------------------------------------------
# Add a few more.
#----------------------------------------------------------------
add_member TOOL $ifile
add_member TOOL Makefile
directory=$PWD
case $directory in
  //*/*) directory=/${PWD#//*/};;
esac

#----------------------------------------------------------------
# Output the results
#----------------------------------------------------------------
echo "# Makefile Generated `date`"
output_macro MNC ${MNC:-$prefix}
output_macro HOMEDIR ${HOMEDIR:-$directory}
if [ -n "$SUBDIRS" ]; then
  output_macro SUBDIRS $SUBDIRS
fi
if [ -n "$SUBDIRS4" ]; then
  output_macro SUBDIRS4 $SUBDIRS4
fi
echo SPECFILE=$ifile
output_macro SRC $SRC
output_macro TOOL $TOOL
output_macro SCRIPT $SCRIPT
output_macro OBJ $OBJ
output_macro TGT $TGT
output_macro DISTRIB $DISTRIB
output_macro IDISTRIB $IDISTRIB
output_macro SRCDIST $SRCDIST
output_macro NONRCS $NONRCS
output_macro TMCBASE $tmcbase
output_macro CMDBASE $cmdbase
echo 'RCS=$(SRC) $(TOOL) $(SCRIPT)'
echo 'SOURCE=$(RCS) $(NONRCS)'
echo 'OBJECT=$(OBJ) *.err'
echo 'TARGET=$(TGT)'
echo 'DSTRB=$(TGT) $(DISTRIB) $(SCRIPT)'

# Output selected macros if they have been defined
if [ -n "$TGTNODE" ]; then echo TGTNODE=$TGTNODE; fi
if [ -n "$TGTDIR" ]; then echo TGTDIR=$TGTDIR; fi

echo "include /usr/local/lib/src/appgen.mk"
echo
echo 'all : $(TGT)'
if [ $cleandist = yes ]; then
  echo 'VERSION=`cat VERSION`'
  echo 'extdistribution : $(DSTRB) $(SRCDIST)'
  echo "\tmkdir -p \$(TGTDIR)/bin/\$(VERSION)/Base"
  echo "\tdistribute \$(FORCE) \$(TGTDIR)/bin/\$(VERSION) \$(DSTRB)"
  echo "\tdistribute \$(FORCE) \$(TGTDIR)/bin/\$(VERSION)/Base \$(SRCDIST)"
  echo 'distribution : extdistribution'
  echo "\tdistribute \$(FORCE) \$(TGTDIR) \$(IDISTRIB)"
else
  echo 'distribution : $(DSTRB) $(SRCDIST)'
  echo "\tdistribute \$(FORCE) \$(TGTDIR) \$(DSTRB) \$(SRCDIST); :\n"
fi

for i in $targets; do
  set_depname $i
  eval deps=\"\$$depname\"
  echo "$i :$deps"
done

echo "\ntidy :\n\trm -f \$(OBJECT)"
echo "clean : tidy\n\trm -f \$(TARGET)"
echo ".cvsignore :"
echo "\t@for i in Makefile '.B4*' \$(OBJECT) \$(TARGET); do echo \"\$\$i\"; done >.cvsignore"

# Output anything beyond the %% in the spec file
while read i; do
  echo "$i"
done
exit 0

