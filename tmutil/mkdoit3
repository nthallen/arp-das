#! /usr/bin/perl -w
use strict;

#ifdef __USAGE
#%C -M -o <doit_name> <srcfile>
#%C -o <doit_name> <srcfile>
#	-M Write dependency information to <doit_name>.dep
#endif

use Getopt::Std;

my %opts;
getopts("Mo:", \%opts) || die "mkdoit3: Fatal\n";
my $srcfile = shift @ARGV ||
  die "mkdoit3: Must specify input filename\n";
die "mkdoit3: Excess command line arguments\n"
  if @ARGV;
die "mkdoit3: Must specify output file with -o option\n"
  unless $opts{o};
open( my $fh, "<", $srcfile ) ||
  die "mkdoit3: Unable to read input file '$srcfile'\n";

my %kwabbr = (
  RT => 'realtime',
  PB => 'playback',
  II => 'InetIn',
  SI => 'SerIn'
);
my %progopts;
my @display; # array of program names
my @client; # array of hashes
my @extract; # array of hashes
my @interact; # array of display and client programs to check in TMBINDIR
my @extracts; # array of extractions in TMBINDIR
my $serin;
my $phrtg;
my $batchfile;
my $memo;
my $logfileroot = '$Experiment';
push @client, { prog => 'playbackclt', cond => undef,
      opts => '' };
while (<$fh>) {
  next if m/^\s*(?:#.*)?$/;
  s/\s*$//;
  # display <name> [options]
  # client <name> [options]
  # phrtg [options]
  # batchfile <name>
  # memo [<logfilename>]
  if ( m/^\s*display\s+(\w+)(?:\s+(.*))?$/ ) {
    my $dispprog = $1;
    my $opts = $2 ? " $2" : '';
    $dispprog =~ m/^\w+disp$/ ||
      die "mkdoit3: Invalid display name: '$dispprog'\n";
    push @display, $dispprog;
    $progopts{$dispprog} = $opts;
    push @interact, $dispprog;
  } elsif ( m/^\s* client \s+ (?:\[(\S+)\] \s+)? (\w+) (?:\s+ (.*))?$/x ) {
    my $cltcond = $1 || "RT";
    my $cltprog = $2;
    my $opts = $3 ? " $3" : '';
    $cltprog =~ m/^\w+clt$/ || die "Invalid client name: '$cltprog'\n";
    $opts ne '' && warn "Options ignored on client program: '$cltprog'\n";
    my $pcond = parse_condition($cltcond);
    push @client, { prog => $cltprog, cond => $pcond, opts => $opts };
    push @interact, $cltprog;
    # die "mkdoit3: Only one client allowed\n" if $client;
    # $client = $cltprog;
    # $progopts{$cltprog} = $opts;
  } elsif ( m/^\s* extraction \s+ (?:\[(\S+)\] \s+)? (\w+) (?:\s+ (.*))?$/x ) {
    my $extcond = $1 || '';
    my $extprog = $2;
    my $opts = ' -t $FlightNode' . ($3 ? " $3" : '');
    my $pcond = $extcond ne '' ? parse_condition($extcond) : undef;
    push @extract, { prog => $extprog, name => '-', cond => $pcond, opts => $opts };
    push @extracts, $extprog;
  } elsif ( m/^\s* server \s+ (?:\[(\S+)\] \s+)? (\S+) \s+ (\w+) (?:\s+ (.*))?$/x ) {
    my $srvcond = $1 || '';
    my $srvname = $2;
    my $srvprog = $3;
    my $opts = $4 ? " $4" : '';
    my $pcond = $srvcond ne '' ? parse_condition($srvcond) : undef;
    push @extract, { prog => $srvprog, name => $srvname, cond => $pcond, opts => $opts };
    push @extracts, $srvprog;
  } elsif ( m/^\s* SerIn \s+ (\w+) (?:\s+ (.*))?$/xi ) {
    $serin = $1;
    my $opts = $2 ? " $2" : '';
    $progopts{$serin} = $opts;
    push @extracts, $serin;
  } elsif ( m/^\s*phrtg(?:\s+(.*))?$/ ) {
    my $opts = $1 ? " $1" : '';
    die "mkdoit3: phrtg specified more than once\n" if defined $phrtg;
    $phrtg = 1;
    $progopts{phrtg} = $opts;
  } elsif ( m/^\s*batchfile\s+(\w+)\s*$/ ) {
    die "mkdoit3: Only one batchfile allowed\n" if defined $batchfile;
    $batchfile = $1;
  } elsif ( m/^\s*memo(?:\s+(\w+)\.log)?\s*$/ ) {
    $memo = 1;
    $logfileroot = $1 if $1;
  } else {
    die "mkdoit3: Unrecognized syntax: '$_'\n";
  }
}
close $fh || warn "Error closing source file\n";
if ( $opts{M} ) {
  open( $fh, ">", "$opts{o}.dep" ) ||
    die "mkdoit3: Unable to write to $opts{o}.dep\n";
  print $fh "$opts{o} :", map( " ${_}nc.cc", @display ), "\n";
  close $fh || warn "Error closing $opts{o}.dep\n";
  exit(0);
}

# %screen = display => [ { varname => Scr$scrnum,
#                          screenname => 'demo',
#                          width => 28,
#                          height => 5 } ]
my %screen;
my $scrnum = 1;
for my $disp ( @display ) {
  open( $fh, "<", "${disp}nc.cc" ) ||
    die "mkdoit3: Unable to read ${disp}nc.cc\n";
  my $scr = $screen{$disp} = [];
  while (<$fh>) {
    if ( m/nct_init\("(\w+)",(\d+),(\d+)\);/ ) {
      push @$scr, { varname => "scr$scrnum",
          screenname => $1,
          height => $2,
          width => $3 };
      ++$scrnum;
    }
  }
}

open( $fh, ">", $opts{o} ) ||
  die "mkdoit3: Unable to write to $opts{o}\n";

print $fh <<'EOF';
#! /bin/ksh
#ifdef __USAGE
#%C [options]
#  Starts Instrument operation
#%C [options] stop
#  Send Quit command to running system
#%C [options] not
#  Shuts down any straggling processes after system has stopped
#%C [options] wait
#  Does not interact with instrument until it is up and operating
#
#options:
#	-s use screen for text-mode data display
#	-a use ASCII chars for line-drawing
#	-n use photon pterms for text-mode data display
#	-p <run> play back <run>
#	-i <host> use InetIn to read data from <host>
#	-t use SerIn as specified in doit
#	-S <session> specify the session (used internally)
#
# SerIn mode can also be indicated by setting environment
# variable SRCMODE=SerIn, typically in Experiment.config.
# InetIn can be specified by the same method.
#endif

umask 2
. ./Experiment.config
[ -z "$Experiment" ] && Experiment=none
export Experiment

function nl_error {
EOF

print $fh "  echo $opts{o}: \$* >&2\n";

print $fh <<'EOF';
  exit 1
}

[ -n "$HomeDir" ] ||
  nl_error "HomeDir undefined in Experiment.config"
[ -z "$CltHomeDir" ] && CltHomeDir=$HomeDir
dir=$PWD
nnd=${dir%$CltHomeDir}
[ "$dir" = "$nnd" ] &&
  nl_error "Not in CltHomeDir $CltHomeDir"
if [ -n "$nnd" ]; then
  nd=${nnd#/net/}
  [ "$nd" = "$nnd" ] &&
    nl_error "Not in CltHomeDir $CltHomeDir (2)"
  [ "$nd" = "${nd#*/}" ] ||
    nl_error "Not in CltHomeDir $CltHomeDir (3)"
fi

# Parse options to select
#   srcmode as one of realtime, InetIn, SerIn or playback
#   dispmode as one of screen, pterm or photon
session=$$
ncopts=''
while getopts "ai:p:S:snt" opt; do
  case $opt in
    a) ncopts='-a';;
    i) srcmode=InetIn; InetSrc=$OPTARG;;
    p) srcmode=playback; Run=$OPTARG;;
    s) dispmode=screen; dispmodescreen=1;;
    S) session=$OPTARG;;
    t) srcmode=SerIn;;
    n) dispmode=pterm; dispmodepterm=1;;
    \?) exit 1;; # getopts reports the error
    :) exit 1;; # getopts reports the error
  esac
done
if [ -n "$srcmode" ]; then
  [ -n "$InetSrc" -a -n "$Run" ] &&
    nl_error "Cannot specify both -i and -p"
else
  case "$SRCMODE" in
    SerIn) srcmode=SerIn;;
    InetIn) srcmode=InetIn;;
    *) srcmode=realtime;;
  esac
fi
if [ -n "$dispmode" ]; then
  [ -n "$dispmodescreen" -a -n "$dispmodepterm" ] &&
    nl_error "Cannot specify both -s and -n"
else
  dispmode=photon
  dispmodephoton=1
fi
EOF

if (!defined($serin)) {
  print $fh '[ $srcmode = SerIn ] && nl_error "SerIn is not configured"', "\n";
}

print $fh <<'EOF';

let sval=$OPTIND-1
shift $sval
option=${1:-start}

gcopt=''
if [ $srcmode = realtime -a -n "$FlightNode" ]; then
  FltNd=/net/$FlightNode
  gcopt="-n $FlightNode"
else
  FlightNode=`hostname`
  FltNd=""
fi

case $dispmode in
  screen) nc=nc; ncopt=$ncopts;;
  pterm) nc=nc; ncopt=$ncopts;;
  photon) nc='';;
  *) nl_error "Unknown dispmode: '$dispmode'";;
esac
EOF

print $fh
  "logfileroot=$logfileroot\n",
  "interacts='", join( ' ', @interact ), "';\n",
  "extracts='", join( ' ', @extracts ), "';\n";
print $fh "batchfile=$batchfile\n" if defined $batchfile;

for my $client ( @client ) {
  if ($client->{cond}) {
    print $fh '[ ', cond2sh($client->{cond}), ' ] && ';
  }
  print $fh 'client=', $client->{prog}, "\n";
}

print $fh "lclsrvr=playbacksrvr\n";
for my $server ( @extract ) {
  if ($server->{name} eq 'cmd/server' ) {
    if ($server->{cond}) {
      print $fh '[ ', cond2sh($server->{cond}), ' ] && ';
    }
    print $fh "lclsrvr='", $server->{prog}, $server->{opts}, "'\n";
  }
}

print $fh <<'EOF';

check_path=no
startup=no
case $option in
  start) startup=yes; check_path=yes;;
  stop);;
  not) startup=yes; batchfile=/dev/null;;
  wait) check_path=yes;;
  screen);;
  *) nl_error "Invalid option: '$option'";;
esac

[ $startup = yes -a -n "$batchfile" -a -z "$SCRIPT_OVERRIDE" ] &&
  nl_error Cannot inhibit or alter startup without SCRIPT_OVERRIDE

# Determine the path. Strictly speaking, this does
# not have to happen before start, but I'd like
# to check that the required applications exist
VERSION=1.0
case $srcmode in
  playback)
    # Need to find the data
    ddir=$Run
    if [ ! -d $ddir ]; then
      for base in . $FltNd$HomeDir; do
        ddir=$base/$Run
        [ -d $ddir ] && break
        ddir=$base/raw/$Run
        [ -d $ddir ] && break
        for runtype in flight cal data junk; do
          ddir=$base/raw/$runtype/$Run
          [ -d $ddir ] && break
        done
        [ -d $ddir ] && break
      done
    fi
    [ -d $ddir ] || nl_error "Unable to locate run $Run"
    [ -f $ddir/VERSION ] && VERSION=`cat $ddir/VERSION`;;
  *)
    ddir=$FltNd$HomeDir
    [ -f VERSION ] && VERSION=`cat VERSION`;;
esac

TMBINDIR=$PWD/bin/$VERSION
[ -d $TMBINDIR ] ||
  nl_error "Unable to locate bin dir for VERSION $VERSION"
export PATH=$TMBINDIR:$PATH

if [ $check_path = yes ]; then
  missing=''
  for app in $interacts; do
    [ -x $TMBINDIR/$app$nc -o -x /usr/local/bin/$app$nc ] ||
      missing="$missing $app$nc"
  done
  for app in $extracts; do
    [ -x $TMBINDIR/$app -o -x /usr/local/bin/$app ] ||
      missing="$missing $app"
  done
  [ -n "$missing" ] &&
    nl_error "Unable to locate required application(s):$missing"
fi

function Launch {
  name=$1
  shift
  [ -n "$launch_error" ] && return 1
  if { $* & }; then
    Launch_pid=$!
    echo "Launch: $Launch_pid $*"
    if [ "$name" != "-" ]; then
      [ "${name#/}" = "$name" ] && name="/dev/huarp/$Experiment/$name"
      waitfor $name 10 || {
        echo "Launch namewait failure: $*" >&2
        launch_error=yes
        return 1
      }
    fi
  else
    echo "Launch Error: $*" >&2
    launch_error=yes
    return 1
  fi
  return 0
}

if [ $srcmode = realtime ]; then
  # SCRIPT_OVERRIDE is the name of a file that will
  # contain the name of the flight script and will
  # be read by flight.sh. Setting it to /dev/null
  # means we can write to it and it won't have any
  # effect.
  # [ -z "$SCRIPT_OVERRIDE" ] && SCRIPT_OVERRIDE=/dev/null
  cmdsrvr=$FltNd/dev/huarp/$Experiment/cmd/server 
  logfile=$FltNd$HomeDir/$logfileroot.log
else  # not realtime
  RemEx=$Experiment
  Experiment=$RemEx.PB.$session
  cmdsrvr=/dev/huarp/$Experiment/cmd/server
  case $srcmode in
    InetIn) logfile=$logfileroot.II.log;;
    SerIn) logfile=$logfileroot.SI.log;;
    *) logfile=$logfileroot.PB.$session.log;;
  esac
fi

# override:
#   no: We don't need to override
#   req: Override is required
#   done: Override has been requested
typeset override=no
[ $startup = yes -a $srcmode = realtime -a -n "$batchfile" ] &&
  override=req
if [ $override = req -a -d `dirname $SCRIPT_OVERRIDE` ]; then
  echo $batchfile >$SCRIPT_OVERRIDE
  override=done
fi

if [ ! -d $FltNd/ ]; then
  echo "Waiting for Flight Node $FlightNode"
  while [ ! -d $FltNd/ ]; do
    waitfor $FltNd/ 2>/dev/null
  done
fi
[ -n "$FltNd" ] && echo "Node $FlightNode is on the network"

if [ $override = req ]; then
  if [ -d `dirname $SCRIPT_OVERRIDE` ]; then
    echo $batchfile >$SCRIPT_OVERRIDE
    override=done
  else
    nl_error "SCRIPT_OVERRIDE path not found: '$SCRIPT_OVERRIDE'"
  fi
fi

typeset waiting=no
typeset signaled=no
typeset fltshstarted=no
while true; do
  typeset see_parent=no
  # np < 2 means parent is not running
  ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
  [ -n "$ppid" ] && see_parent=yes
  if [ $see_parent = yes -o -z "$FltNd" ]; then
    if [ ! -e $cmdsrvr ]; then
      if [ $see_parent = yes ]; then
        if [ $override = done -a ! -f $SCRIPT_OVERRIDE ]; then
          if [ $option = not ]; then
            exit 0
          else
            nl_error "Override observed but startup apparently failed"
          fi
        fi
        [ $override = auto ] &&
          nl_error "Default startup apparently failed"
        if [ $signaled = yes ]; then
          echo "ppid = '$ppid' cmdsrvr = '$cmdsrvr'"
          nl_error "Parent w/o cmdsrvr after signaling"
        fi
      fi
      if [ $startup = yes ]; then
        [ $override = no ] && override=auto
        if [ $see_parent = yes ]; then
          # echo signaling parent
          sudo /usr/local/sbin/signal_parent $FlightNode
          signaled=yes
          oppid=$ppid
          ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
          nw=1
          while [ -n "$ppid" -a "$ppid" = "$oppid" ]; do
            [ $nw -ge 3 ] &&
              nl_error Signaling parent failed
            sleep 1
            ppid=`pidin -n $FlightNode -p parent -fa 2>/dev/null | grep -v pid`
            let nw=nw+1
          done
          [ -z "$FltNd" -a $option = not ] && exit 0
        elif [ $srcmode = realtime ]; then
          if [ $fltshstarted = no ]; then
            if [ $dispmode = screen ]; then
              echo "Starting flight.sh on /dev/con1"
              on -t /dev/con1 /usr/local/sbin/flight.sh &
            else
              tty=`tty`
              echo "Starting flight.sh in a pterm"
              on -t $tty pterm /usr/local/sbin/flight.sh &
            fi
            fltshstarted=yes
          fi
        else
          Launch memo memo -o $logfile 
          Launch TM/DCo TMbfr
          if [ $srcmode = playback ]; then
            Launch DG/cmd rdr -P $ddir -a
          elif [ $srcmode = InetIn ]; then
            Launch DG/cmd InetIn
EOF

if ($serin) {
  print $fh
    '          elif [ $srcmode = SerIn ]; then', "\n",
    "            Launch DG/cmd $serin", $progopts{$serin}, "\n";
}

print $fh <<'EOF';
          fi
          Launch cmd/server $lclsrvr
          if [ -n "$launch_error" ]; then
            echo "Launch failed: cleaning up"
            exec parent -qt1
          fi
        fi
      elif [ $option = stop ]; then
        nl_error "Could not locate $Experiment's command server"
      fi
    fi
  fi

  if [ -e $cmdsrvr ]; then
    case $option in
      not)
        nl_error "Instrument is in operation: quit first";;
      stop)
        echo "Quit" >$cmdsrvr
        exit 0;;
      start) break;;
      wait) break;;
      screen) break;;
      *) nl_error "Unrecognized option '$option'";;
    esac
  fi

  if [ $waiting = no ]; then
    echo "Waiting for parent or command server on node $FlightNode"
    waiting=yes
  fi
  sleep 1
done

if [ $override = done -a -f $SCRIPT_OVERRIDE ]; then
  echo "Override script '$batchfile' not honored, removing"
  rm -f $SCRIPT_OVERRIDE
fi
[ -f $logfile ] || touch $logfile
EOF

print $fh <<'EOF';

# allocate consoles as necessary
case $dispmode in
  screen)
    if [ $option != screen ]; then
      rc=screenrc.$session
      { echo startup_message off
        echo split
        echo focus
        echo resize 2
        echo focus
EOF

if ( $memo ) {
  print $fh <<'EOF';
        if [ -r $logfile ]; then
          echo "screen -t $logfile /bin/sh -c \"echo \$\$ >less.pid.$session; exec less +F $logfile\""
        fi
EOF
}

for my $disp ( @display ) {
  for my $scr ( @{$screen{$disp}} ) {
    print $fh " "x8,
      "echo screen -t $scr->{screenname} /usr/local/sbin/getcon ",
      "\$gcopt $scr->{varname} \$session\n",
      " "x8, "echo width -w $scr->{width}\n",
      " "x8, "#echo height -w $scr->{height}\n";
  }
}

print $fh <<'EOF';
  echo focus
  echo screen -t clt /usr/local/sbin/getcon $gcopt clt $session
  echo height -w 2
  echo width -w 80
  echo focus
EOF

print $fh <<'EOF';
        pbarg=''
        [ $srcmode = playback ] && pbarg=" -p $Run"
EOF

print $fh
  "        echo screen -t $opts{o} \$0 \$pbarg \$ncopt -sS \$session screen\n";
print $fh
  "        echo select $screen{$display[0]}->[0]->{screenname}\n";
print $fh <<'EOF';
      } >$rc
      screen -c $rc
      clear
      rm $rc
      exit 0
    fi;;
  pterm)
    ### Start pterms for each disp screen and clt
EOF

for my $disp ( @display ) {
  for my $scr ( @{$screen{$disp}} ) {
    my $dim = "$scr->{height}x$scr->{width}";
    print $fh
      "    pterm -t $scr->{screenname} -m $dim -g $dim -U ",
      "/usr/local/sbin/getcon \$gcopt $scr->{varname} \$session &\n";
  }
}

print $fh <<'EOF';
    pterm -t clt -m 2x80 -g 2x80 -y 90% -x 0 -U /usr/local/sbin/getcon $gcopt clt $session &
    ;;
  *)
esac
    
pterm_pid=''
EOF

if ( $memo ) {
  print $fh <<'EOF';
if [ -r $logfile -a $dispmode != screen ]; then
  pterm -t $logfile less +F $logfile &
  pterm_pid=$!
fi
if [ -r $logfile -a $dispmode = screen ]; then
  # pterm_pid=`pidin -P less arg | grep -F "less +F $logfile" | head -n1`
  # pterm_pid=${pterm_pid% less +F $logfile}
  pterm_pid=`cat less.pid.$session`
  rm -f less.pid.$session
fi
EOF
}

print $fh <<'EOF';

# Now we want the display and client programs to
# talk to a local memo to avoid cluttering up
# the flight log
memo=/dev/huarp/$Experiment/memo
if [ ! -e $memo ]; then
  Launch memo memo -o $logfileroot.clt.log
fi

# Now collect display consoles for each disp screen and clt
EOF

print $fh "for screen in ",
  join( ' ', map( "$_->{varname}",
        map( @{$screen{$_}}, @display ) ),
        'clt' ), "; do\n";

print $fh <<'EOF';
  term=''
  if [ $dispmode != photon ]; then
    waitfor pty.$screen.$session || nl_error pty.$screen.$session did not appear
    term=`cat pty.$screen.$session`
    rm pty.$screen.$session
  fi
  eval ${screen}_term=$term
done

EOF

for my $disp ( @display ) {
  my $scr = $screen{$disp};
  print $fh "Launch - $disp\$nc \$ncopt -t \$FlightNode$progopts{$disp}",
    map( " \$$_->{varname}_term", @$scr ), "\n";
}

for my $ext ( @extract ) {
  if ($ext->{name} ne '-') {
    my $name = $ext->{name};
    if ($name !~ m,^/,) {
      $name = "/dev/huarp/\$Experiment/$name";
    }
    print $fh '[ ! -e ', $name, " ] && \n  ";
  }
  if ($ext->{cond}) {
    print $fh '[ ', cond2sh($ext->{cond}), ' ] && ';
  }
  print $fh "Launch ", $ext->{name}, " ", $ext->{prog}, $ext->{opts}, "\n";
}

if ( $phrtg ) {
  print $fh '[ $dispmode = screen ] || Launch - phrtg -C $FlightNode -P $ddir',
    $progopts{phrtg}, "\n";
}

## Algos probably won't be implemented quite like this:
## demoalgo &

my $termlist =
  join( '',
    map( " \$$_->{varname}_term",
      map( @{$screen{$_}}, @display ) ) );
print $fh
  '$client$nc -C $FlightNode $clt_term', "$termlist\n";

print $fh <<'EOF';

# This is where we run. When the client quits,
# we are done and need to clean up

[ $dispmode != photon -a -e $cmdsrvr ] &&
  echo "getcon end session $session" >$cmdsrvr

# Leave the log up for a few seconds to view shutdown status
if [ -n "$pterm_pid" ]; then
  sleep 2
  kill $pterm_pid
  # wait a bit so parent needn't report the termination
  sleep 1
EOF

print $fh "  echo \"$opts{o}: Invoking parent for cleanup\"\n";

print $fh <<'EOF';
  exec parent -qt1
else
EOF

print $fh "  echo \"$opts{o}: Invoking parent for cleanup\"\n";

print $fh <<'EOF';
  exec parent -qt3
fi
EOF

my $perm = (stat $opts{o})[2] & 07777;
my $umask = umask;
chmod( $perm | (0111 & ~$umask), $opts{o} );

sub parse_condition {
  my $cond = shift;
  my $lvl = 0;
  my $toks = parse_tokens($cond);
  my @stack;
  my @states = qw(preterm postterm postop);
  my $state = 'preterm';
  while ( @$toks ) {
    my $token = shift @$toks;
    if ($state eq 'preterm') { # preterm, can accept monadic, lparen, keyword or term
      $token->{prestate} = 'preterm';
      if ($token->{type} eq 'monadic') {
        push(@stack, $token);
        $state = 'postop';
      } elsif ($token->{type} eq 'keyword') {
        push(@stack, $token);
        $state = 'postterm';
      } elsif ($token->{type} eq 'lparen') {
        push(@stack, $token);
        $state = 'preterm';
      } elsif ($token->{type} eq 'term') {
        push(@stack, $token);
        $state = 'postterm';
      } else {
        die "Syntax error preterm\n";
      }
    } elsif ($state eq 'postterm') { # postterm: rparen, dyadic
      if ($token->{type} eq 'rparen') {
        my $expr = pop @stack || die "Stack underflow on rparen\n";
        my $lparen = pop @stack || die "Stack underflow on rparen\n";
        $lparen->{type} eq 'lparen' || die "rparen without matching lparen (2)\n";
        $lparen->{arg} = $expr;
        unshift @$toks, { type => 'term', op => $lparen };
        $state = $lparen->{prestate};
      } elsif ($token->{type} eq 'dyadic') {
        push @stack, $token;
        $state = 'postop';
      } else {
        die "Syntax error postterm\n";
      }
    } elsif ($state eq 'postop') { # postop: monadic, lparen, keyword, term
      if ($token->{type} eq 'monadic') {
        $token->{prestate} = 'postop';
        push @stack, $token;
      } elsif ($token->{type} eq 'lparen') {
        $token->{prestate} = 'postop';
        push @stack, $token;
        $state = 'preterm';
      } elsif ($token->{type} eq 'keyword' || $token->{type} eq 'term') {
        my $op = pop(@stack) || die "Stack underflow postop kw|term,monadic\n";
        if ($op->{type} eq 'monadic') {
          $op->{arg} = $token;
          $state = $op->{prestate};
          unshift @$toks, { type => 'term', op => $op };
        } elsif ($op->{type} eq 'dyadic') {
          my $arg1 = pop(@stack) || die "Stack underflow postop kw|term,dyadic\n";
          $state = $arg1->{prestate};
          $op->{arg1} = $arg1;
          $op->{arg2} = $token;
          unshift @$toks, { type => 'term', op => $op };
        } else {
          die "Unexpected op type '" . $op->{type} . "' in postop\n";
        }
      } else {
        die "Syntax error postop\n";
      }
    } else {
      die "Bad state\n";
    }
  }
  @stack == 1 || die "Incomplete expression\n";
  return pop @stack;
}

sub parse_tokens {
  my $str = shift;
  my $istr = $str;
  my $toks = [];
  while ($str ne '') {
    if ($str =~ s/^!//) {
      push(@$toks, { type => 'monadic', op => '!' });
    } elsif ( $str =~ s/^([|&])// ) {
      push(@$toks, { type => 'dyadic', op => $1 });
    } elsif ( $str =~ s/^([(])// ) {
      push(@$toks, { type => 'lparen', op => $1 });
    } elsif ( $str =~ s/^([)])// ) {
      push(@$toks, { type => 'rparen', op => $1 });
    } elsif ( $str =~ s/^(RT|realtime|PB|playback|II|InetIn|SI|SerIn|screen|pterm|photon)\b// ) {
      my $kw = $kwabbr{$1} || $1;
      push(@$toks, { type => 'keyword', op => $kw });
    } else {
      warn "Bad logic syntax in '$istr' before '$str'\n";
      return $toks;
    }
  }
  return $toks;
}

sub cond2sh {
  my $expr = shift;
  if ($expr->{type} eq 'monadic') {
    return $expr->{op} . ' \( ' . cond2sh($expr->{arg}) . ' \)';
  } elsif ($expr->{type} eq 'dyadic') {
    my $op = ($expr->{op} eq '|') ? ' -o ' : ' -a ';
    return cond2sh($expr->{arg1}) . $op . cond2sh($expr->{arg2});
  } elsif ($expr->{type} eq 'keyword') {
    my $varname = '$dispmode';
    if ($expr->{op} =~ m/^realtime|playback|InetIn|SerIn$/ ) {
      $varname = '$srcmode';
    }
    return "$varname = " . $expr->{op};
  } elsif ($expr->{type} eq 'term') {
    return cond2sh($expr->{op});
  } elsif ($expr->{type} eq 'lparen') {
    return '\( ' . cond2sh($expr->{arg}) . ' \)';
  } else {
    die "Invalid condition node type: " . $expr->{type};
  }
}
