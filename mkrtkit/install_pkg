#! /usr/bin/perl -w
use strict;
use File::Path;
use File::Copy;
use Cwd qw(getcwd abs_path);

# install_pkg <pkg>
#
# Reads Header to identify Version and list of manifest files
# Creates destination directory
# Copies files into the destination directory
# Creates MANIFEST_pkg, which identifies the files in the
# destination directory.
#
# It should be an error if MANIFEST_pkg is not listed in the Header.
#
# Note that since the files to install are read from the Header,
# additional files used to generate the MANIFESTs can be stored
# in the pkg source directory.
#
### This has not yet been implemented:
# If the target pkg/version already exists, perform two tests:
#   a) Check to see if any of the MANIFESTs have changed
#   b) Check to see if any of the source files have been modified
#      since the previous version
# If either of these changes have occured, report as an error,
# indicating that this package needs to have its version incremented.
### Alternately
# Never overwrite an existing installation
# Use chkpkgs to decide if a version needs to be incremented

my $pkgname = shift(@ARGV) || die "No package argument\n";

$pkgname =~ m/^\w+$/ or
  die "Invalid package name: '$pkgname'\n";

my $pkgroot = "/var/huarp/pkg";
my $pkgcache = "/var/huarp/pkgcache";
my $pkg = pkg_read_header($pkgname);
my $src = "pkgs/$pkgname";
my $dest = "$pkgroot/$pkgname-$pkg->{Version}";
my $archive = "$pkgcache/$pkgname-$pkg->{Version}.tar";
my $rdest = $dest; $rdest =~ s|^/||;

-d $pkgroot || mkpath($pkgroot) ||
  die "Fatal: Unable to create pkgroot $pkgroot\n";
-d $pkgcache || mkpath($pkgcache) ||
  die "Fatal: Unable to create pkgcache $pkgcache\n";
if ( -d $dest ) {
  warn "$pkgname-$pkg->{Version} already installed: skipping\n";
} else {
  mkpath($dest) ||
    die "Fatal: Unable to create package destination $dest\n";
  my $MP = "$dest/MANIFEST_pkg";
  open( my $MPfh, ">$MP" ) || die "Unable to write $MP\n";
  print $MPfh "$rdest/Header\n";
  copy( "$src/Header", "$dest/Header" );
  for my $mf ( @{$pkg->{Files}} ) {
    my $manifest = $mf->{List};
    print $MPfh "$rdest/$manifest\n";
    if ( $manifest ne "MANIFEST_pkg" ) {
      copy( "$src/$manifest", "$dest/$manifest" ) ||
	die "Copy $src/$manifest $dest/$manifest failed\n";
    }
  }
  close $MPfh || warn "Error closing $dest/MANIFEST_pkg\n";
  print "Installed: $dest\n";
}
if ( -f $archive || -f "$archive.gz" ) {
  warn "$archive already exists: will not overwrite\n";
} else {
  # Create the archive:
  my $cwd = getcwd();
  print "Creating archive $archive.gz\n";
  for my $mf ( @{$pkg->{Files}} ) {
    chdir($mf->{SrcRoot}) || die;
    system( "tar -rf $archive --owner=0 --group=0 --no-recursion " .
	    "-T $dest/$mf->{List}" ) &&
      die "tar failed creating archive for $pkg->{name}\n";
  }
  chdir($cwd);
  system("gzip $archive") && die "gzip $archive failed\n";
  print "Created archive $archive.gz\n";
}
exit(0);

sub pkg_read_header {
  # Now read the header
  #  ^Requires: Add packages to reqlist in reverse order
  #  ^Files: <file> @ <SrcRoot>
  my $pkg;
  $pkg->{name} = shift || die "No package arg to pkg_read_header\n";
  $pkg->{Files} = [];
  my $hdr = "pkgs/$pkg->{name}/Header";
  open( HDR, "<$hdr" ) ||
    die "Unable to read Header for package $pkg->{name}\n";
  my $has_pkg = 0;
  while ( my $line = <HDR> ) {
    chomp $line;
    # We ignore comments and dependencies
    next if $line =~ m/^\s*(?:#.*)?$/;
    next if $line =~ m/^\s*Requires:((?:\s+[-\w.]+)*)$/;
    if ( $line =~ m|^\s*Files:\s*(\w+)\s*\@\s*(/(?:(?:\w+/)*\w+)?)$| ) {
      my $List = $1;
      my $SrcRoot = $2;
      if ( $List eq "MANIFEST_pkg" ) {
	$has_pkg = 1;
      } else {
	-f "pkgs/$pkg->{name}/$List" ||
	  die "Unable to find filelist '$List' specified in $hdr\n";
	-d $SrcRoot ||
	  die "Invalid SrcRoot path '$SrcRoot' specified in $hdr\n";
      }
      push(@{$pkg->{Files}}, { List => $List, SrcRoot => $SrcRoot } );
    } elsif ( $line =~ m|^Version:\s*([.\d]+)$| ) {
      $pkg->{Version} = $1;
    } else {
      die "Syntax error in $hdr: '$line'\n";
    }
  }
  die "$hdr does not list MANIFEST_pkg\n" unless $has_pkg;
  die "$hdr does not specify Version\n" unless $pkg->{Version};
  return $pkg;
}
