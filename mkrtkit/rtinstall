#!/qnxbase/bin/sh

SRCPATH=$1

# We need it later on even if the user ejects the CD
cp /qnxbase/bin/shutdown /dev/shmem/

# This is a slightly non-standard runtime environment
export PATH=/qnxbase/bin:/qnxbase/usr/bin:/qnxbase/sbin:/qnxbase/usr/sbin:$PATH
export LD_LIBRARY_PATH=/qnxbase/lib:/qnxbase/usr/lib:/qnxbase/lib/dll:$LD_LIBRARY_PATH

pipe &
on -W 60 -w /dev/pipe

ln -sP /dev/shmem /tmp

# For those scripts that need it
ln -sP /qnxbase/bin/sh /bin/sh
ln -sP /qnxbase/usr/lib/terminfo /usr/lib/terminfo
export TERM=qansi-m


###############################################################################
# functions
###############################################################################

getresp() {
  printf "$1 [$2] "
  read resp
  if test "X$resp" = "X" ; then
    resp=$2
  fi
}

function install {
  cfg=$1
  fs=$2
  echo Checking for existing disk partitions
  for ftype in t179 t79 t78 t77; do
    if [ $(fdisk /dev/hd0 query -$ftype) -ne 0 ]; then
      echo "Error: $ftype partition already exists on first hard disk" 1>&2 
      echo "Aborting installation" 1>&2 
      return 1
    fi
  done

  if [ ! -f "$SRCPATH/repository/$cfg.cfg" ]; then
    echo "Unknown config: '$cfg'"
    return 1
  fi

  case $fs in
    qnx4)
      fdisk /dev/hd0 add -t79
      fdisk /dev/hd0 boot -t79
      fdisk /dev/hd0 loader
      mount -e /dev/hd0
      echo Formatting /dev/hd0t79 with QNX4 Filesystem
      dinit -h -f $SRCPATH/boot/fs/qnxbase.ifs /dev/hd0t79
      echo Mounting /dev/hd0t79 as /install
      mount -tqnx4 /dev/hd0t79 /install
      if [ ! -d/install ]; then
	echo "Error mounting /install"
	return 1
      fi;;
    qnx6)
      fdisk /dev/hd0 add -t179
      fdisk /dev/hd0 boot -t179
      fdisk /dev/hd0 loader
      mount -e /dev/hd0
      echo Formatting /dev/hd0t179 with QNX6 Filesystem
      mkqnx6fs -Tdesktop /dev/hd0t179
      echo Mounting /dev/hd0t179 as /install
      mount -tqnx6 /dev/hd0t179 /install
      if [ ! -d /install ]; then
	echo "Error mounting /install"
	return 1
      fi
      cp $SRCPATH/boot/fs/*.ifs /install/.boot/;;
    *)
      echo "Unrecognized filesystem option"
      return 1;;
  esac

  cd /install
  echo Beginning installation of $cfg archives
  while read arch; do
    echo "Extracting $SRCPATH/repository/$arch"
    tar -zxf $SRCPATH/repository/$arch
  done <$SRCPATH/repository/$cfg.cfg

  # This bit is here since the system really wants everything 
  # rooted at / but the archives include files in x86/*. If x86 
  # is a directory, then we put things right. The alternative is to 
  # do the right thing when making the archives.
  if [ -d x86 ]; then
    echo Found an /x86 directory
    cp -cRp x86/* .
    rm -rf x86
  fi
  if [ ! -e x86 ]; then
    echo Creating /x86 link
    ln -s . x86
  fi

  echo Copying boot images
  mkdir -p /install/boot/fs
  cp $SRCPATH/boot/fs/*.ifs /install/boot/fs/

  echo "mount=/" >/install/.diskroot

  [ -d /install/etc/system/config ] || mkdir -p /install/etc/system/config
  touch /install/etc/system/config/nophoton

  echo Installation complete
}

function usb_installer {
  bootroot=$1
  mtpart=`mount | grep "on $bootroot type"`
  mtpart=${mtpart%% *}
  mtpart=/dev/${mtpart##*/dev/}
  mtdev=${mtpart%t*}

  # echo "mtpart is '$mtpart' mtdev is '$mtdev'"

  newusb=''

  for dev in /dev/umass[0-9]; do
    if [ -e $dev -a $dev != $mtdev ]; then
      if [ -n "$newusb" ]; then
	echo "More than one target device discovered: '$dev'"
      else
	newusb=$dev
      fi
    fi
  done
  if [ -z "$newusb" ]; then
    echo "No target USB device located"
    return
  fi
  echo "Ready to install to $newusb"
  parts=''
  hasparts=no
  for part in ${newusb}t*; do
    [ -e $part ] && parts="$parts $part"
  done
  if [ -n "$parts" ]; then
    echo "$newusb has existing partitions"
    hasparts=yes
    echo "Dismounting:"
    for part in $parts; do
      echo "  $part"
      umount $part
    done
  fi
  fdisk $newusb show | grep -q "^[1-4]\. [^-]" && hasparts=yes
  if [ $hasparts = yes ]; then
    echo "If you want to preserve the data on this drive, stop now."
    echo "Otherwise, we will invoke fdisk, so you can manually"
    echo "delete any existing partitions."
    echo -n "Continue? [N/y]: "
    read j
    case $j in
      [yY]*) ;;
      *) echo "Aborting USB initialization"; return;;
    esac
    fdisk $newusb
    hasparts=no
    fdisk $newusb show | grep -q "^[1-4]\. [^-]" && hasparts=yes
    if [ $hasparts = yes ]; then
      echo "Partitions still found on $newusb: aborting USB initialization"
      return
    fi
  fi
  echo -n "Continue with installation to $newusb? [N/y]: "
  read j
  case $j in
    [yY]*) ;;
    *) echo "Aborting USB initialization"; return;;
  esac
  fdisk $newusb add -t79
  fdisk $newusb boot -t79
  fdisk $newusb loader
  mount -e $newusb
  # Now need to double-check that this did not go so far as
  # to automount the drive
  mntd=`mount | grep $newusb`
  if [ -n "$mntd" ]; then
    fs=${mntd#* on }
    fs=${fs%% *}
    if [ -e "$fs" ]; then
      echo "Oops, mount over-mounted automatically to $fs: umounting"
      umount $fs
      if [ -e "$fs" ]; then
	echo "Apparently failed to umount $fs. Aborting"
	return
      fi
    else
      echo "Failed to deal with mount response: '%mntd'"
      echo "Aborting USB initialization"
      return
    fi
  fi
  echo Formatting ${newusb}t79 with QNX4 Filesystem
  dinit -h -f ./boot/fs/usbinst.ifs ${newusb}t79
  echo Mounting ${newusb}t79 as /fs/usbinst
  mount -tqnx4 ${newusb}t79 /fs/usbinst
  if [ ! -d /fs/usbinst ]; then
    echo "Error mounting ${newusb}t79 as /fs/usbinst"
    return
  fi
  echo Copying installation files
  cp -pR rtinstall instflop.dat boot repository /fs/usbinst
  echo Dismounting ${newusb}t79
  umount ${newusb}t79
  echo "Initialization of ${newusb} as installation media complete"
}

crntcfg=''
filesystem=qnx6

function select_cfg {
  cd $SRCPATH/repository
  echo Available Install Sets:
  n=1
  defn=1
  for cfg in *.cfg; do
    if [ -f $cfg ]; then
      cfg=${cfg%.cfg}
      [ "$crntcfg" = "" ] && crntcfg=$cfg;
      if [ $crntcfg = $cfg ]; then
        iscrnt='*'
        defn=$n
      else
        iscrnt=' '
      fi
      echo "  $n $iscrnt $cfg"
      eval "cfg_$n=$cfg"
    fi
    let n=n+1
  done
  getresp Configuration $defn
  eval "newcfg=\${cfg_$resp}"
  if [ -n "$newcfg" -a -f "$newcfg.cfg" ]; then
    crntcfg=$newcfg;
  else
    echo "\aUnrecognized response"
  fi
}

function toggle_fs {
  case $filesystem in
    qnx6) filesystem=qnx4;;
    *) filesystem=qnx6;;
  esac
}

for ftype in t179 t79 t78 t77; do
  if [ -e /dev/hd0$ftype ]; then
    echo Dismounting /dev/hd0$ftype
    umount /dev/hd0$ftype
  fi
  if [ $(fdisk /dev/hd0 query -$ftype) -ne 0 ]; then
    echo "***************************************************"
    echo "Partition of type $ftype already exists on /dev/hd0"
    echo "To install, you must first invoke fdisk manually"
    echo "and delete that partition."
    echo "***************************************************\a"
  fi
done

while true; do
  cd $SRCPATH/repository
  echo
  echo ========================================
  echo Available Install Sets:
  for cfg in *.cfg; do
    if [ -f $cfg ]; then
      cfg=${cfg%.cfg}
      [ "$crntcfg" = "" ] && crntcfg=$cfg;
      if [ $crntcfg = $cfg ]; then
        iscrnt='*'
      else
        iscrnt=' '
      fi
      echo "  $iscrnt $cfg"
    fi
  done
  cd /
  echo "Filesystem for install [qnx4|qnx6]: $filesystem"
  echo "[qnx4 is currently recommended for flash drives]"
  echo ========================================
  echo "1 Install $crntcfg $filesystem"
  echo "2 Select Install Set"
  echo "3 Toggle Install Filesystem"
  echo "4 Invoke fdisk manually"
  echo "5 Create USB Flash Installer"
  echo "6 Shell"
  echo "7 Shutdown"
  echo "8 Reboot"
  getresp Option: 1
  case $resp in
    1) install $crntcfg $filesystem;;
    2) select_cfg;;
    3) toggle_fs;;
    4) fdisk /dev/hd0;;
    5) cd $SRCPATH; usb_installer $SRCPATH;;
    6) sh;;
    7) shutdown -b;;
    8) shutdown;;
    *) echo "\aUnrecognized option";;
  esac
done
