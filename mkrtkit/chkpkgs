#! /usr/bin/perl -w
use strict;
use File::Compare;

# chkpgks looks at packages in pkgs/*/Header
#  If package is installed, it compares the uninstalled
#  files with the installed files, requiring a version
#  bump if anything has changed. Then it compares
#  the modification times of the files listed in the
#  MANIFESTs to the creation time of the archive.


my $RV = 0;

# First catalog what packages we have, both uninstalled
# and installed.
my @pkgs;
my %pkg; # the currently installed packages
my %missing; # missing packages
my $pkgdir = "/var/huarp/pkg";
# First the uninstalled
for my $pkg ( <pkgs/*/Header> ) {
  if ( -f $pkg ) {
    $pkg =~ s|^pkgs/(.*)/Header$|$1|;
    $pkg{$pkg} = [];
    push @pkgs, $pkg;
  }
}
# Now the installed
for my $pkg ( <$pkgdir/*> ) {
  if ( -d $pkg ) {
    my $pp = pkg_check($pkg, $pkgdir);
    if ( ! defined $pkg{$pp->{root}} ) {
      $pkg{$pp->{root}} = [];
      push @pkgs, $pp->{root};
    }
    push @{$pkg{$pp->{root}}}, $pp;
  }
}
for my $pkg ( sort @pkgs ) {
  $pkg{$pkg} = [ sort { ver_comp($b,$a); } @{$pkg{$pkg}} ];
}

# Complain if we have more than one version installed:
for my $pkg ( sort @pkgs ) {
  if ( @{$pkg{$pkg}} > 1 ) {
    warn "$pkg: multiple versions installed\n";
    $RV = 1;
  }
}

# Now let's handle the command line
# If explicit packages are on the command line, check
# them. Otherwise, check all the packages.
my @checklist = @ARGV ? @ARGV : @pkgs;
for my $pkg ( @checklist ) {
  $RV = 1 if check_header($pkg);
}

# Report missing packages
for my $reqd ( sort keys %missing ) {
  warn "$reqd: not found, required by ",
    join( ", ", @{$missing{$reqd}} ), "\n";
}

exit($RV);

sub pkg_check {
  my ( $pkg, $src ) = @_;
  if ( $pkg =~ m|^(?:.*/)?(\w+)(?:-(\d+(?:\.\d+)*))?$| ) {
    my $root = $1;
    my @ver;
    @ver = split( /\./, $2 ) if $2;
    return { root => $root, ver => \@ver, src => $src };
  } else {
    die "Invalid package reference: '$pkg' from $src\n";
  }
}

sub ver_comp {
  # I am going with slow so I can call this function
  # outside sort.
  my ( $a, $b ) = @_;
  my $i = 0;
  my $va = $a->{ver};
  my $vb = $b->{ver};
  for ( my $i = 0; ; ++$i ) {
    if ( $i >= @$va ) {
      if ( $i >= @$vb ) {
        return 0;
      } else {
        return -1;
      }
    } elsif ( $i >= @$vb ) {
      return 1;
    }
    my $rv = $va->[$i] <=> $vb->[$i];
    return $rv if $rv;
  }
}

sub ver_print {
  my $a = shift;
  return $a->{root} . '-' . join '.', @{$a->{ver}};
}

sub check_header {
  my $pkg = shift;
  my $hdr = "pkgs/$pkg/Header";
  my $havesource = 1;
  my $err_if_newer = 1;
  if ( ! -f $hdr && defined $pkg{$pkg} ) {
    $hdr = "$pkgdir/" .
	    ver_print($pkg{$pkg}->[0]) . "/Header";
    $havesource = 0;
  }
  die "FATAL: Could not find Header for '$pkg'\n" unless -f $hdr;
  my $RV = 0;
  my $version;
  my @mani;
  open(my $fh, "<", $hdr) || die "Unable to read '$hdr'\n";
  while (<$fh>) {
    s/\s*$//;
    if ( $_ =~ m/^Version: *(\S+)\s*$/ ) {
      $version = $1;
    } elsif ( $_ =~ m/^Files:\s*(\w+)\s+\@\s+(\S+)$/ ) {
      my $file = $1;
      my $root = $2;
      $root =~ s,^(.*[^/])$,$1/,;
      push(@mani, { file => $file, root => $root });
    } elsif ( $_ =~ m/^Requires:\s*(\w+(?:\s+\w+)*)$/ ) {
      my @reqd = split ' ', $1;
      for my $reqd ( @reqd ) {
	if ( ! defined $pkg{$reqd} ) {
	  $missing{$reqd} ||= [];
	  push @{$missing{$reqd}}, $pkg;
	  $RV = 1;
	}
      }
    } elsif ( $_ =~ m/^\s*#/ ) {
    } else {
      warn "$pkg: Unrecognized content in $hdr: '$_'\n";
    }
  }
  die "No version defined for package $pkg\n" unless defined $version;
  my $pkgv = "$pkg-$version";
  my $pkgp = "/var/huarp/pkg/$pkgv";
  my $tgz = "/var/huarp/pkgcache/$pkgv.tar.gz";
  if ( -d $pkgp ) {
    if ( $havesource ) {
      # Package/version is installed
      # warn "  $pkg: Checking source definitions against installed $pkgv:\n";
      if ( -f "$pkgp/Header" ) {
	if ( compare( $hdr, "$pkgp/Header" ) != 0 ) {
	  warn "$pkg: Header has changed: New version required\n";
	  $RV = 1;
	}
      } else {
	warn "$pkg: $pkgp/Header is missing\n";
      }
      for my $man ( @mani ) {
	my $fn = $man->{file};
	if ( $fn ne "MANIFEST_pkg" ) {
	  if ( -f "pkgs/$pkg/$fn" ) {
	    if ( -f "$pkgp/$fn" ) {
	      if ( compare("pkgs/$pkg/$fn", "$pkgp/$fn") != 0 ) {
		warn "$pkg: $fn has changed: New version required\n";
		$RV = 1;
	      }
	    } else {
	      warn "$pkg: $pkgp/$fn missing.\n";
	      $RV = 1;
	    }
	  } else {
	    warn "$pkg: $fn missing\n";
	    $RV = 1;
	    if ( ! -f "$pkgp/$fn" ) {
	      warn "$pkg: $pkgp/$fn missing too!\n";
	    }
	  }
	}
      }
    }
  } else {
    my $inst_ver = ver_print($pkg{$pkg}->[0]);
    warn "$pkg: $pkgv not installed\n",
         "  Will report differences from $inst_ver.\n";
    $tgz = "/var/huarp/pkgcache/$inst_ver.tar.gz";
    $err_if_newer = 0;
  }
  my $have_tgz = -f $tgz;
  my $tgz_time = $have_tgz ? -M $tgz : 0;
  warn "$pkg: $tgz is missing\n" unless $have_tgz;
  for my $man ( @mani ) {
    my $fn = $man->{file};
    my $root = $man->{root};
    if ( -f "pkgs/$pkg/$fn" ) {
      open( my $fn, "<", "pkgs/$pkg/$fn" ) ||
	die "Unable to read pkgs/$pkg/$fn\n";
      while (<$fn>) {
	s/\s*$//; # chomp
	my $path = "$root$_";
	if ( ! -f $path && ! -d $path && ! -l $path ) {
	  warn "$pkg: File $path missing\n";
	  $RV = 1;
	} elsif ( -f $path && $have_tgz && -M $path < $tgz_time ) {
	  warn "$pkg: File $path is newer\n";
	  $RV = 1 if $err_if_newer;
	}
      }
      close($fn) || warn "$pkg: Error closing pkgs/$pkg/$fn\n";
    }
  }
  return $RV;
}
