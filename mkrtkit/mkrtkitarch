#! /usr/pkg/bin/perl -w
use strict;
use File::Path;
use File::Copy;
use Cwd qw(getcwd abs_path);

# mkrtkitarch <destdir> <pkg>
#
# Package definitions are found under /var/huarp/pkg/<pkg>-<ver>/
# Each directory must include a Header file with at least the
# following information
#  ^Requires:(?:\s+(\w+)(?:-(\d+(?:\.\d+)*))?)*$
# A full package implementation would allow dependency on
# specific version ranges. I will probably opt for taking the
# latest version in most cases, particularly at this point
# where we are making initial installs.
#
# Later, as new packages are created or old packages are updated,
# I will want a package install utility that would need to look
# at the dependencies and decide whether other packages need
# to be updated.
#
# Optional Header contents:
#  ^Files: <file> @ <path>
#    Directory to cd to before creating archive
#    More than one Files: line is supported (and usually required)

my $pkgroot = "/var/huarp/pkg";
my $pkgcache = "/var/huarp/pkgcache";

-d $pkgroot || mkpath($pkgroot) || die "Fatal: Unable to create pkgroot $pkgroot\n";
-d $pkgroot || die "Fatal: Misunderstood mkpath return\n";

-d $pkgcache || mkpath($pkgcache) || die "Fatal: Unable to create pkgcache $pkgcache\n";
-d $pkgcache || die "Fatal: Misunderstood mkpath return\n";

die "Insufficient arguments\n" unless @ARGV >= 2;
die "Too many arguments\n" unless @ARGV <= 2;

my $pkgdest = shift @ARGV;
-d $pkgdest || die "Package destination directory '$pkgdest' not found\n";
$pkgdest = abs_path($pkgdest);

my @reqlist;
my @pkglist;
my %pkglist;

my $toppkg;

while ( @ARGV ) {
  my $pkg = pop(@ARGV);
  my $pkgpkg = pkg_check($pkg, 'Command Line');
  push( @reqlist, $pkgpkg );
  $toppkg = $pkgpkg->{root} unless defined $toppkg;
}

# I am taking the latest version, regardless of what is requested,
# so if the package has been visited before, we can skip it.
while (@reqlist) {
  my $pkg = pop(@reqlist);
  if ( ! defined $pkglist{$pkg->{root}} ) {
    my @opts;
    @opts = sort { vercmp($a,$b) } map s|^.*/|| &&
       pkg_check($_, "Package directory: $pkgroot"),
       glob "$pkgroot/$pkg->{root}-[0-9]*";
    # These are sorted in ascending order, so the last element
    # is the one we want
    die "Unable to locate package $pkg->{root} required by $pkg->{src}\n"
      unless @opts;
    my $inst = pop(@opts);
    die "Latest version of package $pkg->{root} is older ",
	"than version required by $pkg->{src}\n"
      unless vercmp( $inst, $pkg ) >= 0;
    push( @pkglist, $inst );
    $pkglist{$inst->{root}} = $inst;
    $inst->{name} = "$inst->{root}-" . join( '.', @{$inst->{ver}});
    pkg_read_header( $inst );
    my $archive = "$pkgcache/$inst->{name}.tar";
    die "Archive $archive.gz not found\n" unless -f "$archive.gz"
  }
}

# Go through @pkglist and link to the archives from the repository directory
open( my $cfg, ">", "$pkgdest/$toppkg.cfg" ) ||
  die "Cannot write $pkgdest/$toppkg.cfg\n";
inst_pkg( $cfg, $toppkg );
close($cfg) || warn "Error closing $pkgdest/$toppkg.cfg\n";
exit(0);

sub inst_pkg {
  my ( $cfg, $pkg ) = @_;
  my $ipkg = $pkglist{$pkg} ||
    die "No package in pkglist for $pkg\n";
  if ( defined $ipkg->{visited} ) {
    warn "Dependency loop detected involving Package $pkg\n"
      if $ipkg->{visited} == 1;
    return;
  }
  $ipkg->{visited} = 1;
  for my $dep ( @{$ipkg->{Requires}} ) {
    inst_pkg( $cfg, $dep );
  }
  $ipkg->{visited} = 2;
  
  print $cfg "$ipkg->{name}.tar.gz\n";
  if ( ! -l "$pkgdest/$ipkg->{name}.tar.gz" ) {
    print "Linking archive $ipkg->{name}.tar.gz into repository\n";
    unless ( symlink( "$pkgcache/$ipkg->{name}.tar.gz",
		     "$pkgdest/$ipkg->{name}.tar.gz" ) ) {
      if ( ! -l "$pkgdest/$ipkg->{name}.tar.gz" ) {
	die "symlink for $ipkg->{name}.tar.gz failed\n";
      }
    }
  }
}

# pkg_check(name) verifies the syntax of a package reference
# and returns a hashref with $root and @ver elements
sub pkg_check {
  my ( $pkg, $src ) = @_;
  if ( $pkg =~ m/^([\w-]+)(?:-(\d+(?:\.\d+)*))$/ ) {
    my $root = $1;
    my @ver;
    @ver = split( /\./, $2 ) if defined($2) && $2 ne '';
    return { root => $root, ver => \@ver, src => $src };
  } elsif ( $pkg =~ m/^([\w-]+)$/ ) {
    my $root = $1;
    my @ver;
    return { root => $root, ver => \@ver, src => $src };
  } else {
    die "Invalid package reference: '$pkg' from $src\n";
  }
}

sub vercmp {
  # I am going with slow so I can call this function
  # outside sort.
  my ( $a, $b ) = @_;
  my $i = 0;
  my $va = $a->{ver};
  my $vb = $b->{ver};
  for ( my $i = 0; ; ++$i ) {
    if ( $i >= @$va ) {
      if ( $i >= @$vb ) {
        return 0;
      } else {
        return -1;
      }
    } elsif ( $i >= @$vb ) {
      return 1;
    }
    my $rv = $va->[$i] <=> $vb->[$i];
    return $rv if $rv;
  }
}

sub pkg_read_header {
  # Now read the header
  #  ^Requires: Add packages to reqlist
  #  ^Files: <file> @ <SrcRoot>
  my $pkg = shift;
  return if $pkg->{Files};
  $pkg->{Files} = [];
  $pkg->{Requires} = [];
  open HDR, "<$pkgroot/$pkg->{name}/Header" ||
    die "Unable to read Header for package $pkg->{name} required by $pkg->{src}\n";
  while ( my $line = <HDR> ) {
    chomp $line;
    next if $line =~ m/^\s*(?:#.*)?$/;
    if ( $line =~ m/^\s*Requires:((?:\s+[-\w.]+(?:-\[0-9\]\*)?)*)$/ ) {
      for my $rpkg ( split ' ', $1 ) {
        $rpkg =~ s/-\[0-9\]\*$//;
      	my $rpkgpkg = pkg_check( $rpkg, $pkg->{name} );
        push( @reqlist, $rpkgpkg );
        push @{$pkg->{Requires}}, $rpkgpkg->{root};
      }
    } elsif ( $line =~ m|^\s*Files:\s*(\w+)\s*\@\s*(/(?:(?:\w+/)*\w+)?)$| ) {
      -f "$pkgroot/$pkg->{name}/$1" ||
        die "Unable to find filelist '$1' specified in $pkg->{name}/Header\n";
      -d $2 ||
        die "Invalid SrcRoot path '$2' specified in $pkg->{name}/Header\n";
      push(@{$pkg->{Files}}, { List => $1, SrcRoot => $2 } );
    } elsif ( $line =~ m|^\s*Version:\s*\d+(?:\.\d+)*$| ) {
      # OK
    } else {
      die "Syntax error in $pkg->{name}/Header: '$line'\n";
    }
  }
}
