DR Redesign Project

TM data stream consists of:

TMStream : Header Data*
Data : DASCmd TMData TimeStamp

Header :
  Header data defining frame dimensions, rate, and
  location of synch and MFCtr (tm.dac) Any newly
  opened stream will begin with this information,
  regardless of the current status of the stream.

DASCmd :
  This might actually be obsolete. The old commands
  consisted of:
    TM Start
    TM End
    Quit
    TM Clear Errors
    TM Suspend Logging
    TM Resume Logging

  When looking at a TM Stream, TM Start is implicit. TM End
  has been deprecated for years. Quit is also implicit in
  EOF. TM Clear Errors pertained specifically to error counts
  when receiving bi-phase or serial data, and is hence
  driver-specific. Suspend and Resume Logging are a convenience
  that is focused on the logger. It is probably more appropriate
  for the logger to receive those commands directly somehow.

  The takehome is that these traditional DASCmds need not be
  propogated through TMbfr or included in the TM Stream at all. The
  question remains how TM-stream-related commanding should be
  handled. We still need:

    Handled by DG and stripped:
      TM Start
      TM Quit
    Forwarded to DCs:
      TM Logging Suspend
      TM Logging Resume
    Handled by TMbfr only in non-realtime modes
      Go Slower
      Go Faster
      Fast Forward
      Fast Forward to MFCtr %s
      Fast Forward to Time %s
      Play
      Stop
      Row Step
      Restart
      Rewind to Time %s
      Rewind to MFCtr %s

  [TM Start and Quit should probably go directly to the DG (data
  generator) Data regulation commands need to go to TMbfr directly,
  perhaps using an IOCTL interface. Then again... we could support
  command forwarding, sending the these commands to the local DG
  and forwarding them to the TMbfr, but having them stripped out
  of the stream passed to clients. This makes sense from the
  standpoint of making the command interface much cleaner, and
  sticking with only one writer to TMbfr. Of course this begs the
  question of supporting some commands to DCs, like Logging
  commands, etc.]

  I well define them in the TM stream format, but I believe all TM
  commands should be considered logically out-of-band (though not
  physically) and should be discarded before logging. Commands
  handled by DG or TMbfr can also be stripped from the stream
  before forwarding unless there is a compelling reason to pass
  them on. (The Restart/Rewind commands signal a time
  discontinuity, which DCs might be able to take advantage of.)
  
  Ugh, that won't work at all! If you have stopped playback, you
  will block the rdr, so then no commands can come through. I
  think we're going to have to provide dual interfaces and dual
  streams. Commands will always flow on the command channel. Then
  the first-order implementation does not require commanding
  beyond the DG (start, quit) TMbfr could provide read and write
  on a command interface with a short circular buffer.

TMData :

  The historical form of TMData was a variable identifying the
  number of minor frames or rows of data followed by the data.
  The incomplete implementation of multiple rows per minor frame
  negated their benefit. The idea was to save the storage space
  of multiple instances of MFCtr and Synch by not reporting them
  at the highest data rate, but the bfr implementation only
  delivered complete minor frames, so for display and algorithm
  use data now arrived in clumps and the minor frame rate. Hence
  for most purposes, the minor frame had to be pushed to the
  maximum data rate so display and algorithms could maintain time
  granularity.

  There are two possible approaches then. We could implement a
  bfr that can handle rows properly or come up with an
  alternative. The problem with rows in general is that we don't
  know what to make of them in isolation, since they don't
  necessarily contain the MFCtr that places them in the TM frame.
  One approach would be to allow the delivery of isolated rows,
  but accompany them with additional header data identifying the
  MFCtr and offset of the row within the minor frame.

  Another approach is to allow repackaging of minor frames
  without their MFCtr and/or Synch words for the purpose of
  logging. A TMData2 header could accompany them identifying the
  starting MFCtr. This would probably only be practical when the
  frame was laid out with MFCtr at offset 0 and Synch at the end,
  which is the default for 1-row minor frames. It might be
  desirable to include some sort of checksum, at least during
  logging.
  
  070308: Reviewing this definition of data formats (and the
  accompanying definitions in tmlib/src/tm.h) it's worth noting
  the relationship between this stream format and the theoretical
  underlying telemetry stream. The telemetry stream includes
  minor frame counters and synch words and a fixed data rate.
  This stream format adds metadata to assist in data compression,
  data synchronization, and ground station operation. The stream
  format will be suitable for logging pretty much as is.

Bfr strategies:

Initialization {
  Command-line options to determine data buffer size
  (although the actual allocation might not occur until
  the writer arrives)
  Use Experiment environment variable to determine device name.
  /dev/huarp/$Experiment/TM
  Task oui_init_options with handling all of that

  When initialization is written {
    Allocate buffer space (if specified by time)
    Program timer for output (depending on command-line)
  }
}

Suppose I ignore DASCmds. Then I need to make sure that:

  1: Each client receives Header before any data
  2: Each client receives Time Stamps in the correct location
  
Suppose I don't ignore DASCmds. Then I need to also forward the
DAScmds which haven't been stripped to the clients. However, the
fact that these are deemed to be out-of-band means I don't have
to waste effort to guarantee that they go out in any particular
sequence relative to the data, only that they go out.

Store data in circular queue
Store metadata in a separate circular queue or linked list
  metadata {
    Starting coordinate wrap:MFCtr:Row:TS
    Type: Data for TimeStamp
    n_rows or the actual TimeStamp
    All data in this block must be in sequential rows. Any
    skips in data require a new metadata block
    Supply scratch area in each metadata record for header
    information: No that won't work in multi-thread case.
    Must supply enough scratch areas in each ocb(?)
  }
}

Keep track of opens and closes so we know when it's OK to quit.
Be sure to handle IONOTIFY stuff.

Extend OCB {
  Space for scratch buffer to hold at least one row of data
  (or one missing-rows record or timestamp)
  nbytes, offset
  missing rows
  rcvid
  nbytes_req
  hold_index
}

Process read request {
  Calculate quickly whether we have enough data to complete
  the request. If not, stay on the queue. If so, send it.
  Must hold a mutex throughout (remind me again why we are
  multi-threaded?)
  if internal offset is non-zero, send remainder of current
  record {
    if req < remaining, send req and update internal offset
    else send remaining and update remaining req
  }
  if missing rows is non-zero, send missing rows record {
    build record, then either add it to an IOV or copy
    it into fractional buffer and do the partial thing.
    If fractional buffer is in use, just return.
  }
  if a timestamp, send it
  if data send as much as will fit {
    Calculate number of rows, with minimum of 1
    Build header in scratch area of metadata and add it
    either as direct IOV and/or copied into fractional buffer.
    Add data rows either as IOV and/or copied into fractional buffer.
  }
  If transmitting a partial minor frame (NMF > 1) use a TMDATA2
  header that specifies the MFCtr and Row.

  If transmitting a partial row (because requested data size is
  smaller than a complete row), cache the remainder of the row
  in the ocb for later broadcast.
}

On read {
  Process request as far as possible, possibly queue for
  later processing.
}

On write {
  Record data and reply {
	As data comes in, append it to the current data block if
	possible, else create a new block. When the data queue wraps,
	need to start retiring data from the first block.

	As rows of data expire, could check against open ocbs and
	record if they are missing any data. They could be sent a
	record indicating the loss.
  }
  pthread_setschedparam() to highest blocked client and
  run queue.
}

How do priority and threads interact? {
  Write test app to explore inheritance issues.
  I need the writer to operate at the highest
  priority. I cannot afford priority inversion where a low
  priority client is tying up the resmgr with a large
  transfer. Hence, multi-threading is indicated. If I naively
  implement multi-threading, it seems as though priority
  inversion is still possible unless we guarantee that there
  are at least as many threads as clients. This seems like
  overkill, but maybe it isn't. Another approach that would
  be more complicated but more reliable would involve immediately
  enqueuing all read requests but processing write requests
  immediately. This would work best with 2 or more threads, but
  with only the first thread receiving requests. All the other
  threads would only work on enqueued stuff.
}

Modes of Operation {
  Local Realtime {
    spit out data as fast as possible to readers for realtime
    response. Return as soon as there is data to report.
    Drop rows as necessary. Default if writer is O_NONBLOCK.
  }
  Remote Realtime {
    Regulate output of data for readability for all readers
    (i.e. synchronize all readers)[what does this mean?]
    The basic idea here is to hide bursty network data
    transmission by locally regulating the playback to the
    realtime rate. Ideally it would be nice to regulate output to
    certain clients (display) while feeding others unregulated
    data (logger). That would allow one to pause the screen
    update but continue logging all data. Hmmm. Maybe the
    regulation should be a DC feature
    Drop rows as necessary
  }
  Playback {
    Regulate output of data for readability
    Block writer instead of dropping rows
  }
  Extraction {
    Stream output
    Fill output buffers before replying
    Block writer instead of dropping rows
  }
  Use command-line options to specify modes: {
    -p: playback, block writer
    -o[FR]: Specify output mode:
      F = fast output: return up to nbytes but as little
          as one row of data.
      R = regulated output: return data at fixed rate
      [default] return up to nbytes
  }
}

TMbfr.c {
  main() {
    -extend OCB
  } 
  io_read(ctp, msg, ocb) {
    We don't get to save the ctp or the msg it contains,
    so we need to save pertinent info about the request.
    (This means we probably cannot take advantage of the
    IOVs in the ctp either...) Save away the rcvid and
    the number of bytes requested. I can write data
    to the reader's address space, which means I can
    block without fear that the writer will retire data.
    Of course that isn't likely anyway... If we're doing
    extractions, then we are probably blocking anyway.
    If I made a provision to allow individual read clients
    to change their read mode (-o[FRS]) then it would
    make sense for an extraction to run -oS while a display
    runs -oR, but that isn't a high priority. It might
    make sense to have -oS force blocking behaviour
  }
  io_write()
  io_open() {
    If open for write {
	  Obtain a mutex
	  check to make sure this is
	  the only writer. attr->wcount == 0
	}
    call iofunc_open_default()
    release the mutex
  }
  handle opens {
	keep track of how many opens we have (or is that done automagically?
  }
  handle ionotify
}
tmq.c {
  queue functions {
    process_read()
    run_reads()
    process_write()
    process_tick()
    Make a simple array of pointers to OCBs
    To add something to the list, add a pointer on the end
    To remove, replace current position with what's at the
    end of the list and decrease by one. Need to store a
    hold_index in the OCB so that it can be removed
    properly.
    Need to hold a mutex while manipulating the array, but
    it could be a different mutex from the read/write one.
    process_write() will know when new data has arrived and
    will pass through the array processing each pending request.
    process_tick() could do the same thing.
  }
}
tmopt.oui {
  -o[FRS]
    F = Fast
    R = Regulated
    B = Block
    Fast returns ASAP
    Regulated returns ASAP but only releases data based
      on a timer.
    Block fills the readers' buffers before returning.
    -oB requires -p.
  -b<size> buffer size
  Command-line options to determine data buffer size
  (although the actual allocation might not occur until
  the writer arrives)
  Use Experiment environment variable to determine device name.
  /dev/huarp/$Experiment/TM
  * - Playback flag could be handled through O_NONBLOCK as
  determined by the writer. Collection is the only case where
  O_NONBLOCK would be specified. All other approaches would
  be blocking.
}
